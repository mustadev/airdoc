{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/clinic/clinic.component.ts","webpack:///src/app/components/clinic/clinic.component.html","webpack:///src/app/components/doctor-over-view/doctor-over-view.component.ts","webpack:///src/app/components/doctor-over-view/doctor-over-view.component.html","webpack:///src/app/components/doctor/doctor.component.ts","webpack:///src/app/components/doctor/doctor.component.html","webpack:///src/app/components/layout/footer/footer.component.ts","webpack:///src/app/components/layout/footer/footer.component.html","webpack:///src/app/components/layout/header/header.component.ts","webpack:///src/app/components/layout/header/header.component.html","webpack:///src/app/components/pages/about/about.component.ts","webpack:///src/app/components/pages/about/about.component.html","webpack:///src/app/components/pages/admin/admin-login/admin-login.component.ts","webpack:///src/app/components/pages/admin/admin-login/admin-login.component.html","webpack:///src/app/components/pages/admin/admin-profile/admin-profile.component.ts","webpack:///src/app/components/pages/admin/admin-profile/admin-profile.component.html","webpack:///src/app/components/pages/booking/booking.component.ts","webpack:///src/app/components/pages/booking/booking.component.html","webpack:///src/app/components/pages/contact/contact.component.ts","webpack:///src/app/components/pages/contact/contact.component.html","webpack:///src/app/components/pages/doctor/clinic-settings/clinic-settings.component.ts","webpack:///src/app/components/pages/doctor/clinic-settings/clinic-settings.component.html","webpack:///src/app/components/pages/doctor/doctor-appointment/doctor-appointment.component.ts","webpack:///src/app/components/pages/doctor/doctor-appointment/doctor-appointment.component.html","webpack:///src/app/components/pages/doctor/doctor-appointments/doctor-appointments.component.ts","webpack:///src/app/components/pages/doctor/doctor-appointments/doctor-appointments.component.html","webpack:///src/app/components/pages/doctor/doctor-change-password/doctor-change-password.component.ts","webpack:///src/app/components/pages/doctor/doctor-change-password/doctor-change-password.component.html","webpack:///src/app/components/pages/doctor/doctor-dash-board/doctor-dash-board.component.ts","webpack:///src/app/components/pages/doctor/doctor-dash-board/doctor-dash-board.component.html","webpack:///src/app/components/pages/doctor/doctor-profile-settings/doctor-profile-settings.component.ts","webpack:///src/app/components/pages/doctor/doctor-profile-settings/doctor-profile-settings.component.html","webpack:///src/app/components/pages/doctor/doctor-review/doctor-review.component.ts","webpack:///src/app/components/pages/doctor/doctor-review/doctor-review.component.html","webpack:///src/app/components/pages/doctor/doctor-reviews/doctor-reviews.component.ts","webpack:///src/app/components/pages/doctor/doctor-reviews/doctor-reviews.component.html","webpack:///src/app/components/pages/doctor/doctor-side-bar/doctor-side-bar.component.ts","webpack:///src/app/components/pages/doctor/doctor-side-bar/doctor-side-bar.component.html","webpack:///src/app/components/pages/doctor/login/login.component.ts","webpack:///src/app/components/pages/doctor/login/login.component.html","webpack:///src/app/components/pages/doctor/profile/profile.component.ts","webpack:///src/app/components/pages/doctor/profile/profile.component.html","webpack:///src/app/components/pages/doctor/signup/signup.component.ts","webpack:///src/app/components/pages/doctor/signup/signup.component.html","webpack:///src/app/components/pages/home/home.component.ts","webpack:///src/app/components/pages/home/home.component.html","webpack:///src/app/components/pages/patient/change-password/change-password.component.ts","webpack:///src/app/components/pages/patient/change-password/change-password.component.html","webpack:///src/app/components/pages/patient/login/login.component.ts","webpack:///src/app/components/pages/patient/login/login.component.html","webpack:///src/app/components/pages/patient/patient-appointment/patient-appointment.component.ts","webpack:///src/app/components/pages/patient/patient-appointment/patient-appointment.component.html","webpack:///src/app/components/pages/patient/patient-appointments/patient-appointments.component.ts","webpack:///src/app/components/pages/patient/patient-appointments/patient-appointments.component.html","webpack:///src/app/components/pages/patient/patient-side-bar/patient-side-bar.component.ts","webpack:///src/app/components/pages/patient/patient-side-bar/patient-side-bar.component.html","webpack:///src/app/components/pages/patient/profile/profile.component.ts","webpack:///src/app/components/pages/patient/profile/profile.component.html","webpack:///src/app/components/pages/patient/signup/signup.component.ts","webpack:///src/app/components/pages/patient/signup/signup.component.html","webpack:///src/app/components/pages/search/search.component.ts","webpack:///src/app/components/pages/search/search.component.html","webpack:///src/app/components/patient/patient.component.ts","webpack:///src/app/components/patient/patient.component.html","webpack:///src/app/components/rating-star/rating-star.component.ts","webpack:///src/app/components/rating-star/rating-star.component.html","webpack:///src/app/components/review-form/review-form.component.ts","webpack:///src/app/components/review-form/review-form.component.html","webpack:///src/app/components/review/review.component.ts","webpack:///src/app/components/review/review.component.html","webpack:///src/app/components/reviews/reviews.component.ts","webpack:///src/app/components/reviews/reviews.component.html","webpack:///src/app/models/Appointment.ts","webpack:///src/app/models/Clinic.ts","webpack:///src/app/models/ClinicLocation.ts","webpack:///src/app/models/Contact.ts","webpack:///src/app/models/Like.ts","webpack:///src/app/models/Password.ts","webpack:///src/app/models/Review.ts","webpack:///src/app/services/admin-auth.guard.ts","webpack:///src/app/services/appointment.service.ts","webpack:///src/app/services/auth-interceptor.service.ts","webpack:///src/app/services/auth.service.ts","webpack:///src/app/services/contact.service.ts","webpack:///src/app/services/doctor-auth.guard.ts","webpack:///src/app/services/doctor.service.ts","webpack:///src/app/services/patient-auth-guard.ts","webpack:///src/app/services/patient.service.ts","webpack:///src/app/services/review.service.ts","webpack:///src/app/services/token-storage.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","pathMatch","redirectTo","component","canActivate","AppRoutingModule","forRoot","imports","AppComponent","tokenStorageService","isLoggedIn","showAdminBoard","showModeratorBoard","getToken","user","getUser","username","signOut","window","location","reload","selector","templateUrl","styleUrls","AppModule","provide","useClass","multi","declarations","providers","bootstrap","ClinicComponent","doctorService","console","log","JSON","stringify","clinic","getClinicPhotos","doctor","subscribe","photos","filter","photo","clinicPhotos","map","image","data","DoctorOverViewComponent","DoctorComponent","showDefaultAvatar","getAvatar","res","retrieveResonse","base64Data","retrievedAvatar","undefined","getClinic","DOCTOR","PATIENT","ADMIN","FooterComponent","authService","showDoctorMenu","showPatientMenu","showAdminMenu","getLoggedInUser","updateFooter","userType","getUserType","roles","loggedInUser","HeaderComponent","router","updateHeader","navigate","AboutComponent","AdminLoginComponent","tokenStorage","activatedRoute","form","isLoginFailed","errorMessage","retUrl","queryParamMap","params","get","adminLogin","saveToken","accessToken","saveUser","saveUserType","emit","err","error","message","AdminProfileComponent","BookingComponent","route","patientService","appointmentService","appointment","getById","doctorId","avatar","doctorAvatar","getCurrentUser","patient","patientId","appointmentDate","appDate","Date","bookingDate","state","toISOString","add","back","onSubmit","ContactComponent","contactService","contact","submitted","addContact","ClinicSettingsComponent","successMessage","empty","services","join","specialities","split","updateClinic","setTimeout","photoId","deleteClinicPhoto","event","currentSelectedPhoto","target","files","item","uploadClinicPhoto","type","UploadProgress","uploadProgress","Math","round","loaded","total","uploadErrorMessage","latitude","longitude","zoom","DoctorAppointmentComponent","update","DoctorAppointmentsComponent","autService","appotmentService","getAllDoctorAppoitments","apps","appointments","DoctorChangePasswordComponent","doctorSerive","isPasswordFailed","isPasswordSuccess","passwordMatch","doc","newPassword","confirmPassword","password","oldPassword","updatePassword","DoctorDashBoardComponent","DoctorProfileSettingsComponent","updateDoctor","currentSelectedAvatar","uploadAvatar","DoctorReviewComponent","review","patientAvatar","DoctorReviewsComponent","reviewService","getReviews","reviews","DoctorSideBarComponent","logout","LoginComponent","doctorLogin","ProfileComponent","isPatient","rating","SignupComponent","isSuccessful","isSignUpFailed","doctorRegister","HomeComponent","city","query","queryParams","search","ChangePasswordComponent","patientLogin","PatientAppointmentComponent","doctorSerivce","PatientAppointmentsComponent","getAllPatientAppoitments","PatientSideBarComponent","birthday","updatePatient","patientRegister","SearchComponent","doctors","searchCity","searchQuery","PatientComponent","RatingStarComponent","onRating","readonly","max","ratedCount","maxItem","i","push","s","ReviewFormComponent","addReview","authorId","content","ReviewComponent","autheService","deleteReview","editReview","author","currentUserId","like","setLiked","isLiked","likes","includes","likeReview","unlikeReview","index","indexOf","splice","toggleLike","ReviewsComponent","refresh","refreshReviews","updateReview","Appointment","Clinic","name","description","country","address","minPrice","maxPrice","consultPrice","ClinicLocation","Contact","Like","Password","Review","AdminAuthGuard","authStorage","next","alert","url","providedIn","AppointmentService","http","appoitmentUrl","post","put","TOKEN_HEADER_KEY","USER_TYPE_HEADER_KEY","AuthInterceptor","token","authReq","headers","set","clone","handle","AUTH_USER","DOCTOR_API","PATIENT_API","ADMIN_API","httpOptions","AuthService","credentials","api","email","phone","lastname","firstname","login","register","ContactService","contactUrl","DoctorAuthGuard","API_URL","DoctorService","doctorUrl","file","formData","FormData","append","reportProgress","responseType","request","PatientAuthGuard","baseUrl","PatientService","patirnt","ReviewService","reviewId","TOKEN_KEY","USER_KEY","USER_TYPE","TokenStorageService","localStorage","clear","removeItem","setItem","getItem","parse","environment","production","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ContactComponent } from './components/pages/contact/contact.component';\nimport { AboutComponent } from './components/pages/about/about.component';\nimport { HomeComponent } from './components/pages/home/home.component';\nimport { ProfileComponent as DoctorProfileComponent } from './components/pages/doctor/profile/profile.component';\nimport { LoginComponent as DoctorLoginComponent } from './components/pages/doctor/login/login.component';\nimport { SignupComponent as DoctorSingupComponent} from './components/pages/doctor/signup/signup.component';\nimport { DoctorDashBoardComponent } from './components/pages/doctor/doctor-dash-board/doctor-dash-board.component';\nimport { DoctorProfileSettingsComponent } from './components/pages/doctor/doctor-profile-settings/doctor-profile-settings.component';\nimport { DoctorChangePasswordComponent} from './components/pages/doctor/doctor-change-password/doctor-change-password.component';\nimport { ClinicSettingsComponent } from './components/pages/doctor/clinic-settings/clinic-settings.component';\nimport { DoctorAppointmentsComponent } from './components/pages/doctor/doctor-appointments/doctor-appointments.component'; \nimport { DoctorReviewsComponent } from './components/pages/doctor/doctor-reviews/doctor-reviews.component'; \nimport { LoginComponent as PatientLoginComponent } from './components/pages/patient/login/login.component';\nimport { SignupComponent as PatientSingupComponent} from './components/pages/patient/signup/signup.component';\nimport { ProfileComponent as PatientProfileComponent } from './components/pages/patient/profile/profile.component';\nimport { PatientAppointmentsComponent } from './components/pages/patient/patient-appointments/patient-appointments.component';\nimport { SearchComponent } from './components/pages/search/search.component';\n\nimport { DoctorAuthGuard } from './services/doctor-auth.guard';\nimport { PatientAuthGuard } from './services/patient-auth-guard';\nimport { ChangePasswordComponent } from './components/pages/patient/change-password/change-password.component';\nimport { BookingComponent } from './components/pages/booking/booking.component';\n\n// @ts-ignore\n// @ts-ignore\nconst routes: Routes = [\n  { path:  '', pathMatch: 'full', redirectTo: 'home' },\n  { path: 'home', component: HomeComponent },\n  { path: 'contact' , component: ContactComponent },\n  { path: 'about' , component: AboutComponent },\n  { path: 'doctor/profile/:id' , component: DoctorProfileComponent},\n  { path: 'doctor/login' , component: DoctorLoginComponent },\n  { path: 'doctor/signup' , component: DoctorSingupComponent },\n  { path: 'doctor/dashboard' , component: DoctorDashBoardComponent, canActivate: [DoctorAuthGuard]},\n  { path: 'doctor/profile-settings' , component: DoctorProfileSettingsComponent, canActivate: [DoctorAuthGuard]},\n  { path: 'doctor/clinic-settings' , component: ClinicSettingsComponent, canActivate: [DoctorAuthGuard]},\n  { path: 'doctor/appointments' , component: DoctorAppointmentsComponent, canActivate: [DoctorAuthGuard]},\n  { path: 'doctor/reviews' , component: DoctorReviewsComponent, canActivate: [DoctorAuthGuard]},\n  { path: 'doctor/change-password', component: DoctorChangePasswordComponent, canActivate: [DoctorAuthGuard]},\n  { path: 'patient/profile' , component: PatientProfileComponent, canActivate:[PatientAuthGuard]},\n  { path: 'patient/login' , component: PatientLoginComponent },\n  { path: 'patient/signup' , component: PatientSingupComponent },\n  { path: 'search' , component: SearchComponent },\n  { path: 'booking/:id' , component: BookingComponent, canActivate: [PatientAuthGuard]},\n  { path: 'patient/appointments' , component: PatientAppointmentsComponent, canActivate: [PatientAuthGuard]},\n  { path: 'patient/change-password' , component: ChangePasswordComponent, canActivate: [PatientAuthGuard]},\n  { path: '**', redirectTo: 'home' } //this must be the last\n\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { TokenStorageService } from './services/token-storage.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  private roles: string[];\n  isLoggedIn = false;\n  showAdminBoard = false;\n  showModeratorBoard = false;\n  username: string;\n\n  constructor(private tokenStorageService: TokenStorageService) { }\n\n  ngOnInit() {\n    this.isLoggedIn = !!this.tokenStorageService.getToken();\n\n    if (this.isLoggedIn) {\n      const user = this.tokenStorageService.getUser();\n      //console.log(user.roles);\n      //this.roles = user.roles;\n\n      //this.showAdminBoard = this.roles.includes('ROLE_ADMIN');\n     // this.showModeratorBoard = this.roles.includes('ROLE_MODERATOR');\n\n      this.username = user.username;\n    }\n  }\n\n  logout() {\n    this.tokenStorageService.signOut();\n    window.location.reload();\n  }\n}\n\n","<div class=\"main-wrapper\">\n    <app-header></app-header>\n    <router-outlet></router-outlet>\n    <app-footer></app-footer>\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { AgmCoreModule } from '@agm/core';\nimport { HashLocationStrategy, LocationStrategy } from '@angular/common';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { PatientComponent } from './components/patient/patient.component';\nimport { DoctorComponent } from './components/doctor/doctor.component';\nimport { HeaderComponent } from './components/layout/header/header.component';\nimport { FooterComponent } from './components/layout/footer/footer.component';\nimport { AboutComponent } from './components/pages/about/about.component';\nimport { ContactComponent } from './components/pages/contact/contact.component';\nimport { HomeComponent } from './components/pages/home/home.component';\nimport { SearchComponent } from './components/pages/search/search.component';\nimport { ReviewComponent } from './components/review/review.component';\nimport { SignupComponent as DoctorSignupComponent } from './components/pages/doctor/signup/signup.component';\nimport { LoginComponent as DoctorLoginComponent } from './components/pages/doctor/login/login.component';\nimport { ProfileComponent as DoctorProfileComponent } from './components/pages/doctor/profile/profile.component';\nimport { SignupComponent as PatientSignupComponent } from './components/pages/patient/signup/signup.component';\nimport { LoginComponent as PatientLoginComponent } from './components/pages/patient/login/login.component';\nimport { ProfileComponent as PatientProfileComponent } from './components/pages/patient/profile/profile.component';\nimport { AuthInterceptor } from './services/auth-interceptor.service';\nimport { DoctorAuthGuard } from './services/doctor-auth.guard';\nimport { PatientAuthGuard } from './services/patient-auth-guard';\nimport { AdminAuthGuard } from './services/admin-auth.guard';\nimport { AdminProfileComponent } from './components/pages/admin/admin-profile/admin-profile.component';\nimport { AdminLoginComponent } from './components/pages/admin/admin-login/admin-login.component';\nimport { ChangePasswordComponent} from './components/pages/patient/change-password/change-password.component';\nimport { ReviewsComponent } from './components/reviews/reviews.component';\nimport { DoctorDashBoardComponent } from './components/pages/doctor/doctor-dash-board/doctor-dash-board.component';\nimport { DoctorProfileSettingsComponent } from './components/pages/doctor/doctor-profile-settings/doctor-profile-settings.component';\nimport { PatientAppointmentsComponent } from './components/pages/patient/patient-appointments/patient-appointments.component';\nimport { PatientAppointmentComponent } from './components/pages/patient/patient-appointment/patient-appointment.component';\n\nimport { BookingComponent } from './components/pages/booking/booking.component';\nimport { RatingStarComponent} from './components/rating-star/rating-star.component';\nimport { ClinicComponent } from './components/clinic/clinic.component';\nimport { DoctorOverViewComponent } from './components/doctor-over-view/doctor-over-view.component';\nimport { ReviewFormComponent } from './components/review-form/review-form.component';\nimport { ClinicSettingsComponent } from './components/pages/doctor/clinic-settings/clinic-settings.component';\nimport { DoctorSideBarComponent } from './components/pages/doctor/doctor-side-bar/doctor-side-bar.component';\nimport { PatientSideBarComponent } from './components/pages/patient/patient-side-bar/patient-side-bar.component';\nimport { DoctorAppointmentsComponent } from './components/pages/doctor/doctor-appointments/doctor-appointments.component';\nimport { DoctorAppointmentComponent } from './components/pages/doctor/doctor-appointment/doctor-appointment.component';\nimport { DoctorChangePasswordComponent } from './components/pages/doctor/doctor-change-password/doctor-change-password.component';\nimport { DoctorReviewsComponent } from './components/pages/doctor/doctor-reviews/doctor-reviews.component';\nimport { DoctorReviewComponent } from './components/pages/doctor/doctor-review/doctor-review.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    PatientComponent,\n    DoctorComponent,\n    HeaderComponent,\n    FooterComponent,\n    AboutComponent,\n    ContactComponent,\n    HomeComponent,\n    SearchComponent,\n    ReviewComponent,\n    DoctorSignupComponent,\n    DoctorLoginComponent,\n    DoctorProfileComponent,\n    PatientSignupComponent,\n    PatientLoginComponent,\n    PatientProfileComponent,\n    AdminProfileComponent,\n    AdminLoginComponent,\n    ChangePasswordComponent,\n    ReviewsComponent,\n    DoctorDashBoardComponent,\n    PatientAppointmentsComponent,\n    PatientAppointmentComponent,\n    DoctorProfileSettingsComponent,\n    BookingComponent,\n    RatingStarComponent,\n    ClinicComponent,\n    DoctorOverViewComponent,\n    ReviewFormComponent,\n    ClinicSettingsComponent,\n    DoctorSideBarComponent,\n    PatientSideBarComponent,\n    DoctorAppointmentsComponent,\n    DoctorAppointmentComponent,\n    DoctorChangePasswordComponent,\n    DoctorReviewsComponent,\n    DoctorReviewComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    FormsModule,\n    AgmCoreModule.forRoot({})\n  ],\n  providers: [\n    { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },\n    {provide: LocationStrategy, useClass: HashLocationStrategy},\n    DoctorAuthGuard,\n    PatientAuthGuard,\n    AdminAuthGuard\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit, Input } from '@angular/core';\nimport { Clinic } from 'src/app/models/Clinic';\nimport { Doctor } from 'src/app/models/Doctor';\nimport { DoctorService } from 'src/app/services/doctor.service';\n\n@Component({\n  selector: 'app-clinic',\n  templateUrl: './clinic.component.html',\n  styleUrls: ['./clinic.component.css']\n})\nexport class ClinicComponent implements OnInit {\n\n  @Input() clinic:Clinic;\n  @Input() doctor:Doctor;\n  clinicPhotos:any[];\n  constructor(\n    private doctorService:DoctorService\n  ) { }\n\n  ngOnInit(): void {\n    console.log(\"Clinic: \", JSON.stringify(this.clinic));\n    this.doctorService.getClinicPhotos(this.doctor.id).subscribe(photos => {\n      photos.filter(photo => {\n        console.log(\"photo \", photo);\n        return photo === null;\n      });\n      this.clinicPhotos = photos.map(photo => {\n        return {\n          \"id\": photo.id,\n          \"image\": 'data:image/jpeg;base64,' + photo.image.data\n        };\n      });\n    })\n  }\n\n}\n","<div class=\"row\">\n    <!-- Clinic Content -->\n    <div class=\"col-md-10\">\n        <div class=\"clinic-content\">\n            <h4 class=\"clinic-name\">{{clinic?.name}}</h4>\n            <p class=\"doc-speciality\">{{doctor?.speciality}}</p>\n            <!-- <div class=\"clinic-details mb-0\">\n                <h5 class=\"clinic-direction\"> <i class=\"fas fa-map-marker-alt\"></i>\n                    {{clinic?.address}} <br></h5>\n            </div> -->\n            <div class=\"clinic-details mb-0\">\n                <p class=\"clinic-direction\"> <i class=\"fas fa-map-marker-alt\"></i> {{clinic.address}}</p>\n                <ul>\n                    <li *ngFor=\"let clinicPhoto of clinicPhotos\">\n                        <a [href]=\"clinicPhoto.image\" data-fancybox=\"gallery2\">\n                            <img [src]=\"clinicPhoto.image\" alt=\"Feature Image\">\n                        </a>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    </div>\n    <!-- /Clinic Content -->\n\n    <div class=\"col-md-2\">\n        <div class=\"consult-price\">\n            {{clinic?.consultPrice | currency}}\n        </div>\n    </div>\n    <div  class=\"col-md-12 mt-5\">\n        <h5 class=\"clinic-direction\"> <i class=\"fas fa-map-marker-alt\"></i>\n            Clinic Location <br></h5>\n        <agm-map \n        [latitude]=\"clinic.location.latitude\" \n        [longitude]=\"clinic.location.longitude\" \n        [zoom]=\"clinic.location.zoom\">\n        <agm-marker \n            [latitude]=\"clinic.location.latitude\" \n            [longitude]=\"clinic.location.longitude\"\n            [markerDraggable]=\"false\">\n        </agm-marker>\n    </agm-map>\n    </div>\n</div>\n","import { Component, OnInit, Input } from '@angular/core';\nimport { Doctor } from 'src/app/models/Doctor';\nimport { Clinic } from 'src/app/models/Clinic';\n\n@Component({\n  selector: 'app-over-view',\n  templateUrl: './doctor-over-view.component.html',\n  styleUrls: ['./doctor-over-view.component.css']\n})\nexport class DoctorOverViewComponent implements OnInit {\n\n  @Input() doctor:Doctor;\n  @Input() clinic:Clinic;\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"row\">\n\n    <div class=\"col-md-12 col-lg-9\">\n\n        <!-- About Details -->\n        <div class=\"widget about-widget\">\n            <h4 class=\"widget-title\">About Me</h4>\n            <p>{{doctor?.aboutMe}}</p>\n        </div>\n        <!-- /About Details -->\n\n\n        <!-- Services List -->\n        <div class=\"service-list\">\n            <h4>Services</h4>\n            <ul class=\"clearfix\">\n                <li *ngFor=\"let service of clinic?.services\">{{service}} </li>\n            </ul>\n        </div>\n        <!-- /Services List -->\n\n        <!-- Specializations List -->\n        <div class=\"service-list\">\n            <h4>Specializations</h4>\n            <ul class=\"clearfix\">\n                <li *ngFor=\"let speciality of clinic?.specialities\">{{speciality}} </li>\n            </ul>\n        </div>\n        <!-- /Specializations List -->\n    </div>\n\n</div>","import { Component, OnInit, Input } from '@angular/core';\nimport { Doctor } from 'src/app/models/Doctor';\nimport { DoctorService } from 'src/app/services/doctor.service';\nimport { Clinic } from 'src/app/models/Clinic';\n\n@Component({\n  selector: 'app-doctor',\n  templateUrl: './doctor.component.html',\n  styleUrls: ['./doctor.component.css']\n})\nexport class DoctorComponent implements OnInit {\n  @Input() doctor: Doctor;\n  clinic:Clinic;\n  clinicPhotos:Array<any>;\n  retrievedAvatar:string;\n  retrieveResonse:any;\n  base64Data:string;\n  speciality: string;\n  showDefaultAvatar:boolean = false;\n\n  constructor(private doctorService:DoctorService) { }\n\n  ngOnInit(): void {\n    //Get Doctor Avatar\n    this.doctorService.getAvatar(this.doctor.id).subscribe(res=> {\n      this.retrieveResonse = res;\n      this.base64Data = this.retrieveResonse?.image?.data;\n      this.retrievedAvatar = 'data:image/jpeg;base64,' + this.base64Data;\n      console.log(res);\n      //console.log(\"base64\", this.base64Data);\n      console.log(\"retrievedAvatar: \", this.retrievedAvatar);\n      if (res?.image?.data === undefined){\n        this.showDefaultAvatar = true;\n        console.log(\"show default\");\n        \n      }\n    });\n    //Get Doctor Clinic\n    this.doctorService.getClinic(this.doctor.id).subscribe(res => {\n      this.clinic = res\n    });\n\n    //Get Clinic Photos\n    this.doctorService.getClinicPhotos(this.doctor.id).subscribe(res => {\n      //Convert image to base64 and return it;\n      this.clinicPhotos = res.map(photo => 'data:image/jpeg;base64,' + photo.image.data);\n    });\n\n  }\n}\n","<div class=\"card\">\n    <div class=\"card-body\">\n        <div class=\"doctor-widget\">\n            <div class=\"doc-info-left\">\n                <div class=\"doctor-img\">\n                    <a routerLink=\"/doctor/profile/{{doctor?.id}}\">\n                        <!-- <img [src]=\"retrievedAvatar\" class=\"img-fluid\" alt=\"Doctor Image\"> -->\n                        <img *ngIf=\"!showDefaultAvatar\" [src]=\"retrievedAvatar\" class=\"img-fluid\"  alt=\"Doctor Image\">\n                        <img *ngIf=\"showDefaultAvatar\" src=\"assets/img/doctors/default-doctor.png\"  class=\"img-fluid\" alt=\"Doctor Image\">\n                   \n                    </a>\n                </div>\n                <div class=\"doc-info-cont\">\n                    <h4 class=\"doc-name\"><a routerLink=\"/doctor/profile/{{doctor?.id}}\">{{doctor?.firstname | titlecase}} {{doctor?.lastname | titlecase}}</a></h4>\n                    <p class=\"doc-speciality\">{{doctor?.speciality }}</p>\n                    <h5 class=\"doc-department\">{{doctor?.speciality}}</h5>\n                    <div class=\"rating\">\n                        <app-rating-star [ratedCount]=\"doctor?.rating\" ></app-rating-star>\n                        <span class=\"d-inline-block average-rating\">({{doctor?.averageRating}})</span>\n                    </div>\n                    <div class=\"clinic-details\">\n                        <p class=\"doc-location\"><i class=\"fas fa-map-marker-alt\"></i>  {{clinic?.country | titlecase }} {{clinic?.city | titlecase}}</p>\n                        <ul class=\"clinic-gallery\">\n                            <li *ngFor=\"let photo of clinicPhotos\">\n                                <a routerLink=\"/doctor/profile/{{doctor?.id}}\" data-fancybox=\"gallery\">\n                                <img [src]=\"photo\" alt=\"Feature\">  \n                                </a>\n                            </li>\n                        </ul>\n                    </div>\n                    <div class=\"clinic-services\">\n                        <span *ngFor=\" let service of clinic?.services\"> {{service}} </span>\n                    </div>\n                </div>\n            </div>\n            <div class=\"doc-info-right\">\n                <div class=\"clini-infos\">\n                    <ul>\n                        <li><i class=\"far fa-comment\"></i> {{doctor?.reviews?.length}} Feedback</li>\n                        <li><i class=\"fas fa-map-marker-alt\"></i> {{clinic?.country + \" \" + clinic?.city}}</li>\n                        <li><i class=\"far fa-money-bill-alt\"></i> {{clinic?.minPrice | currency}} - {{clinic?.maxPrice | currency}}  </li>\n                    </ul>\n                </div>\n                <div class=\"clinic-booking\">\n                    <a class=\"view-pro-btn\" routerLink=\"/doctor/profile/{{doctor?.id}}\">Voir Doctor</a>\n                    <a class=\"apt-btn\" routerLink=\"/booking/{{doctor?.id}}\">BOOK APPOINTMENT</a>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { TokenStorageService } from 'src/app/services/token-storage.service';\nimport { User } from 'src/app/models/User';\n\n  const DOCTOR = \"DOCTOR\";\n  const PATIENT = \"PATIENT\";\n  const ADMIN = \"ADMIN\";\n\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.css']\n})\nexport class FooterComponent implements OnInit {\n\n  private roles: string[];\n  isLoggedIn = false;\n  //showAdminBoard = false;\n  //showModeratorBoard = false;\n  showDoctorMenu = false;\n  showPatientMenu = false;\n  showAdminMenu = false;\n  username: string;\n  loggedInUser:any;\n\n  constructor(\n    private authService:AuthService,\n    private tokenStorageService:TokenStorageService) { }\n\n  ngOnInit(): void {\n    this.isLoggedIn = !!this.tokenStorageService.getToken();\n    this.authService.getLoggedInUser.subscribe((user:User) => this.updateFooter(user));\n\n    if (this.isLoggedIn) {\n      const user = this.tokenStorageService.getUser();\n      const userType = this.tokenStorageService.getUserType();\n      this.roles = user.roles;\n\n      //this.showAdminBoard = this.roles.includes('ROLE_ADMIN');\n      //this.showModeratorBoard = this.roles.includes('ROLE_MODERATOR');\n      this.showDoctorMenu = userType == DOCTOR;\n      this.showPatientMenu = userType == PATIENT;\n      this.showAdminMenu = userType == ADMIN;\n      console.log(\"userType \" + userType);\n      console.log(\"showDoctorMenu: \" +  this.showDoctorMenu);\n      this.username = user.username;\n    }\n  }\n\n  updateFooter(user:User){\n    console.log(\"LoggerInUser \" + user);\n      this.isLoggedIn = true;\n      this.loggedInUser = user;\n      console.log(\"logged in user : \" + this.loggedInUser);\n      this.showDoctorMenu = user.userType == DOCTOR;\n      console.log(\"showDoctorMenu\");\n      console.log(this.showDoctorMenu);\n      this.showPatientMenu = user.userType == PATIENT;\n      console.log(\"this.showPatientMenu\");\n      console.log(this.showPatientMenu);\n      this.showAdminMenu = user.userType == ADMIN;\n      console.log(\"this.showAdminMenu\");\n      console.log(this.showAdminMenu);\n  }\n}\n","<footer class=\"footer\">\n    <!-- Footer Top -->\n    <div class=\"footer-top\">\n        <div class=\"container-fluid\">\n            <div class=\"row\">\n                <div class=\"col-lg-3 col-md-6\">\n                \n                    <!-- Footer Widget -->\n                    <div class=\"footer-widget footer-about\">\n                        <div class=\"footer-logo\">\n                            <img src=\"assets/img/footer-logo.png\" alt=\"logo\">\n                        </div>\n                        <div class=\"footer-about-content\">\n                            <p>AirDoc est une application marocaine fondée en 2020 qui propose un service de gestion en ligne des consultations </p>\n                            <div class=\"social-icon\">\n                                <ul>\n                                    <li>\n                                        <a href=\"#\" target=\"_blank\"><i class=\"fab fa-facebook-f\"></i> </a>\n                                    </li>\n                                    <li>\n                                        <a href=\"#\" target=\"_blank\"><i class=\"fab fa-twitter\"></i> </a>\n                                    </li>\n                                    <li>\n                                        <a href=\"#\" target=\"_blank\"><i class=\"fab fa-linkedin-in\"></i></a>\n                                    </li>\n                                    <li>\n                                        <a href=\"#\" target=\"_blank\"><i class=\"fab fa-instagram\"></i></a>\n                                    </li>\n                                    <li>\n                                        <a href=\"#\" target=\"_blank\"><i class=\"fab fa-dribbble\"></i> </a>\n                                    </li>\n                                </ul>\n                            </div>\n                        </div>\n                    </div>\n                    <!-- /Footer Widget -->\n                    \n                </div>\n                \n                <div class=\"col-lg-3 col-md-6\">\n                \n                    <!-- Footer Widget -->\n                    <div *ngIf=\"!showDoctorMenu\" class=\"footer-widget footer-menu\">\n                        <h2 class=\"footer-title\">For Patients</h2>\n                        <ul>\n                            <li><a routerLink=\"/search\"><i class=\"fas fa-angle-double-right\"></i> Search for Doctors</a></li>\n                            <li><a *ngIf=\"!isLoggedIn \" routerLink=\"/patient/login\"><i class=\"fas fa-angle-double-right\"></i> Login</a></li>\n                            <li><a *ngIf=\"!isLoggedIn \" routerLink=\"/patient/signup\"><i class=\"fas fa-angle-double-right\"></i> Register</a></li>\n                            <li ><a *ngIf=\"showPatientMenu\" routerLink=\"/patient/profile\"><i class=\"fas fa-angle-double-right\"></i> Patient Dashboard</a></li>\n                        </ul>\n                    </div>\n                    <!-- /Footer Widget -->\n                    \n                </div>\n                \n                <div class=\"col-lg-3 col-md-6\">\n                \n                    <!-- Footer Widget -->\n                    <div *ngIf=\"!showPatientMenu\" class=\"footer-widget footer-menu\">\n                        <h2 class=\"footer-title\">For Doctors</h2>\n                        <ul>\n                            <li *ngIf=\"showDoctorMenu\"><a routerLink=\"/doctor/appointments\"><i class=\"fas fa-angle-double-right\"></i> Appointments</a></li>\n                            <li><a *ngIf=\"!isLoggedIn\" routerLink=\"/doctor/login\"><i class=\"fas fa-angle-double-right\"></i> Login</a></li>\n                            <li><a *ngIf=\"!isLoggedIn\" routerLink=\"/doctor/signup\"><i class=\"fas fa-angle-double-right\"></i> Register</a></li>\n                         </ul>\n                    </div>\n                    <!-- /Footer Widget -->\n                    \n                </div>\n                \n                <div class=\"col-lg-3 col-md-6\">\n                \n                    <!-- Footer Widget -->\n                    <div class=\"footer-widget footer-contact\">\n                        <h2 class=\"footer-title\">Contact Us</h2>\n                        <div class=\"footer-contact-info\">\n                            <div class=\"footer-address\">\n                                <span><i class=\"fas fa-map-marker-alt\"></i></span>\n                                <p>Agadir,<br> Morocco </p>\n                            </div>\n                            <p>\n                                <i class=\"fas fa-phone-alt\"></i>\n                                +212 555555555\n                            </p>\n                            <p class=\"mb-0\">\n                                <i class=\"fas fa-envelope\"></i>\n                                airdoc@example.com\n                            </p>\n                        </div>\n                    </div>\n                    <!-- /Footer Widget -->\n                    \n                </div>\n                \n            </div>\n        </div>\n    </div>\n    <!-- /Footer Top -->\n    \n    <!-- Footer Bottom -->\n    <div class=\"footer-bottom\">\n        <div class=\"container-fluid\">\n        \n            <!-- Copyright -->\n            <div class=\"copyright\">\n                <div class=\"row\">\n                    <div class=\"col-md-6 col-lg-6\">\n                        <div class=\"copyright-text\">\n                            <p class=\"mb-0\"></p>\n                        </div>\n                    </div>\n                    <div class=\"col-md-6 col-lg-6\">\n                    \n                        <!-- Copyright Menu -->\n                        <div class=\"copyright-menu\">\n                            <ul class=\"policy-menu\">\n                                <li><a routerLink=\"/term-condition\">Terms and Conditions</a></li>\n                                <li><a routerLink=\"/privacy-policy\">Policy</a></li>\n                            </ul>\n                        </div>\n                        <!-- /Copyright Menu -->\n                        \n                    </div>\n                </div>\n            </div>\n            <!-- /Copyright -->\n            \n        </div>\n    </div>\n    <!-- /Footer Bottom -->\n</footer>\n","import { Component, OnInit } from '@angular/core';\nimport { TokenStorageService } from 'src/app/services/token-storage.service';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { User } from 'src/app/models/User';\nimport { Router } from '@angular/router';\n\n\n  const DOCTOR = \"DOCTOR\";\n  const PATIENT = \"PATIENT\";\n  const ADMIN = \"ADMIN\";\n  \n  @Component({\n    selector: 'app-header',\n    templateUrl: './header.component.html',\n    styleUrls: ['./header.component.css']\n  })\nexport class HeaderComponent implements OnInit {\n\n  \n  private roles: string[];\n  isLoggedIn = false;\n  //showAdminBoard = false;\n  //showModeratorBoard = false;\n  showDoctorMenu = false;\n  showPatientMenu = false;\n  showAdminMenu = false;\n  username: string;\n  loggedInUser:any;\n\n  constructor(\n    private tokenStorageService: TokenStorageService, \n    private authService: AuthService,\n    private router:Router) { }\n\n  ngOnInit() {\n    this.isLoggedIn = !!this.tokenStorageService.getToken();\n    this.authService.getLoggedInUser.subscribe((user:User) => this.updateHeader(user));\n\n    if (this.isLoggedIn) {\n      const user = this.tokenStorageService.getUser();\n      const userType = this.tokenStorageService.getUserType();\n      this.roles = user.roles;\n\n      //this.showAdminBoard = this.roles.includes('ROLE_ADMIN');\n      //this.showModeratorBoard = this.roles.includes('ROLE_MODERATOR');\n      this.showDoctorMenu = userType == DOCTOR;\n      this.showPatientMenu = userType == PATIENT;\n      this.showAdminMenu = userType == ADMIN;\n      console.log(\"userType \" + userType);\n      console.log(\"showDoctorMenu: \" +  this.showDoctorMenu);\n      this.username = user.username;\n    }\n  }\n\n  logout() {\n    this.tokenStorageService.signOut();\n    //window.location.reload();\n    this.router.navigate([\"home\"]).then(()=> {\n      window.location.reload();\n    });\n  }\n\n  updateHeader(user:User){\n    console.log(\"LoggerInUser \", user);\n      this.isLoggedIn = true;\n      this.loggedInUser = user;\n      console.log(\"logged in user : \" + this.loggedInUser);\n      this.showDoctorMenu = user.userType == DOCTOR;\n      console.log(\"showDoctorMenu\");\n      console.log(this.showDoctorMenu);\n      this.showPatientMenu = user.userType == PATIENT;\n      console.log(\"this.showPatientMenu\");\n      console.log(this.showPatientMenu);\n      this.showAdminMenu = user.userType == ADMIN;\n      console.log(\"this.showAdminMenu\");\n      console.log(this.showAdminMenu);\n  }\n\n}\n","<header class=\"header\">\n    <nav class=\"navbar navbar-expand-lg header-nav\">\n        <div class=\"navbar-header\">\n            <a id=\"mobile_btn\" href=\"javascript:void(0);\">\n                <span class=\"bar-icon\">\n                    <span></span>\n                    <span></span>\n                    <span></span>\n                </span>\n            </a>\n            <a routerLink=\"home\" class=\"navbar-brand logo\">\n                <img src=\"assets/img/logo.png\" class=\"img-fluid\" alt=\"Logo\">\n            </a>\n        </div>\n        <div class=\"main-menu-wrapper\">\n            <div class=\"menu-header\">\n                <a routerLink=\"home\" class=\"menu-logo\">\n                    <img src=\"assets/img/logo.png\" class=\"img-fluid\" alt=\"Logo\">\n                </a>\n                <a id=\"menu_close\" class=\"menu-close\" routerLink=\"javascript:void(0);\">\n                    <i class=\"fas fa-times\"></i>\n                </a>\n            </div>\n            <ul class=\"main-nav\" *ngIf=\"!showPatientMenu && !showDoctorMenu && !showAdminMenu\">\n                <li routerLinkActive=\"active\">\n                    <a routerLink=\"/home\">Home</a>\n                </li>\n                <li class=\"has-submenu\" routerLinkActive=\"active\">\n                <li><a routerLink=\"/search\">Search Doctors</a>\n                </li>\n                <li class=\"has-submenu\" routerLinkActive=\"active\">\n                    <a routerLink=\"/contact\">Contact Us</a>\n                </li>\n                <li class=\"has-submenu\" routerLinkActive=\"active\">\n                    <a routerLink=\"/about\">About Us</a>\n                </li>\n            </ul>\n            <ul class=\"main-nav\" *ngIf=\"showPatientMenu\">\n                <li routerLinkActive=\"active\">\n                    <a routerLink=\"/home\">Home</a>\n                </li>\n                <li class=\"has-submenu\" routerLinkActive=\"active\">\n                    <a routerLink=\"/patient/appointments\">Appointments</a>\n                    <!-- <a href=\"#\">Settings <i class=\"fas fa-chevron-down\"></i></a>\n                    <ul class=\"submenu\">\n                        <li routerLinkActive=\"active\"><a routerLink=\"/patient/profile\">Profile Settings</a></li>\n                        <li routerLinkActive=\"active\"><a routerLink=\"/patient/edit-password\">Change Password</a></li>\n                    </ul> -->\n                </li>\n                <li class=\"has-submenu\" routerLinkActive=\"active\"><a routerLink=\"/search\" >Search Doctors</a>\n                </li>\n                <li class=\"has-submenu\" routerLinkActive=\"active\">\n                    <a routerLink=\"/contact\">Contact Us</a>\n                </li>\n                <li class=\"has-submenu\" routerLinkActive=\"active\">\n                    <a routerLink=\"/about\">About Us</a>\n                </li>\n            </ul>\n            <ul class=\"main-nav\" *ngIf=\"showDoctorMenu\">\n                <li routerLinkActive=\"active\">\n                    <a routerLink=\"/home\">Home</a>\n                </li>\n\n                <li class=\"has-submenu\">\n                    <a routerLink=\"/doctor/appointments\" routerLinkActive=\"active\">Appointments</a>\n                    <!-- <ul class=\"submenu\">\n                        <li routerLinkActive=\"active\"><a routerLink=\"/doctor/profile-settings\" routerLinkActive=\"active\">Profile Settings</a></li>\n                        <li routerLinkActive=\"active\"><a routerLink=\"/doctor/change-password\" routerLinkActive=\"active\">Change Password</a></li>\n                    </ul> -->\n                </li>\n                <li class=\"has-submenu\">\n                    <a routerLink=\"/contact\" routerLinkActive=\"active\">Contact Us</a>\n                </li>\n                <li class=\"has-submenu\" routerLinkActive=\"active\">\n                    <a routerLink=\"/about\">About Us</a>\n                </li>\n            </ul>\n            <ul class=\"main-nav\" *ngIf=\"showAdminMenu\">\n                <li routerLinkActive=\"active\">\n                    <a routerLink=\"/home\">Home</a>\n                </li>\n                <li class=\"has-submenu\" routerLinkActive=\"active\">\n                    <a routerLink=\"/admin\" routerLinkActive=\"active\">Admin</a>\n                </li>\n            </ul>\n        </div>\n        <ul class=\"nav header-navbar-rht\" *ngIf=\"!isLoggedIn\">\n            <li class=\"nav-item\" routerLinkActive=\"active\">\n                <a class=\"nav-link header-login\" routerLink=\"/patient/login\">login / Signup </a>\n            </li>\n        </ul>\n\n        <ul class=\"nav header-navbar-rht\" *ngIf=\"isLoggedIn\">\n\n            <li class=\"nav-item\">\n                <a class=\"btn nav-link header-login\" (click)=\"logout()\">logout </a>\n            </li>\n        </ul>\n    </nav>\n</header>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-about',\n  templateUrl: './about.component.html',\n  styleUrls: ['./about.component.css']\n})\nexport class AboutComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<!-- Page Content -->\n<div class=\"content\">\n    <div class=\"container\">\n        <div class=\"row d-flex justify-content-center\">\n            <div class=\"col-8\">\n                <div class=\"about\">\n                    <p>AirDoc est une application marocaine fondée en 2020 \n                        qui propose un service de gestion en ligne des consultations \n                        pour les professionnels de santé et un service de prise de rendez-vous en ligne \n                        pour les patients</p>  \n                </div>\n                                \n            </div>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../../../../services/auth.service'\nimport { TokenStorageService } from '../../../../services/token-storage.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { User } from 'src/app/models/User';\n\n\n@Component({\n  selector: 'app-admin-login',\n  templateUrl: './admin-login.component.html',\n  styleUrls: ['./admin-login.component.css']\n})\nexport class AdminLoginComponent implements OnInit {\n  form: any = {};\n  isLoggedIn = false;\n  isLoginFailed = false;\n  errorMessage = '';\n  roles: string[] = [];\n  retUrl:string = \"admin/profile\";\n\n  constructor(\n    private authService: AuthService,\n    private tokenStorage: TokenStorageService,\n    private router:Router,\n    private activatedRoute:ActivatedRoute) { }\n\n  ngOnInit() {\n    if (this.tokenStorage.getToken()) {\n      this.isLoggedIn = true;\n      this.roles = this.tokenStorage.getUser().roles;\n    }\n    this.activatedRoute.queryParamMap\n                .subscribe(params => {\n            this.retUrl = params.get('retUrl'); \n            console.log( 'LoginComponent/ngOnInit '+ this.retUrl);\n        });\n  }\n\n  onSubmit() {\n    this.authService.adminLogin(this.form).subscribe(\n      (user:User) => {\n        this.tokenStorage.saveToken(user.accessToken);\n        this.tokenStorage.saveUser(user);\n        this.tokenStorage.saveUserType(user.userType);\n\n        this.isLoginFailed = false;\n        this.isLoggedIn = true;\n        this.roles = this.tokenStorage.getUser().roles;\n        this.authService.getLoggedInUser.emit(user);\n        console.log(\"login successful\");\n        console.log(this.tokenStorage.getUser());\n        console.log( 'return to '+ this.retUrl);\n           if (this.retUrl!=null) {\n                this.router.navigate( [this.retUrl]);\n           } else {\n                this.router.navigate( ['admin/profile']);\n           }\n           \n        \n      },\n      err => {\n        this.errorMessage = err.error.message;\n        this.isLoginFailed = true;\n      }\n    );\n  }\n\n  \n}","<div class=\"content \">\n    <div class=\"container-fluid\">\n        <div class=\"row\">\n            <div class=\"col-md-8 offset-md-2\">\n\n                <!-- Login Tab Content -->\n                <div class=\"account-content\">\n                    <div class=\"row align-items-center justify-content-center\">\n                        <div class=\"col-md-7 col-lg-6 login-left\">\n                            <img src=\"assets/img/login-banner.png\" class=\"img-fluid\" alt=\"AirDoc Login\">\n                        </div>\n                        <div class=\"col-md-12 col-lg-6 login-right\">\n                            <div class=\"login-header\">\n                                <h3>Login <span>AirDoc</span></h3>\n                            </div>\n                            <form *ngIf=\"!isLoggedIn\" name=\"form\" (ngSubmit)=\"f.form.valid && onSubmit()\" #f=\"ngForm\"\n                                novalidate>\n                                <div class=\"form-group\">\n                                    <div\n                                      class=\"alert alert-danger\"\n                                      role=\"alert\"\n                                      *ngIf=\"f.submitted && isLoginFailed\"\n                                    >\n                                      Login failed: {{ errorMessage }}\n                                    </div>\n                                  </div>\n                                <div class=\"form-group form-focus\">\n                                    <input class=\"form-control\" name=\"email\" [(ngModel)]=\"form.email\" required\n                                        #email=\"ngModel\" type=\"email\" class=\"form-control floating\">\n                                    <label class=\"focus-label\">Email</label>\n                                    \n                                    </div>\n                                    <div class=\"alert alert-danger\" role=\"alert\" *ngIf=\"f.submitted && email.invalid\"> Email is required!</div>\n                                    <div class=\"form-group form-focus\">\n                                        <input name=\"password\" [(ngModel)]=\"form.password\" required minlength=\"6\"\n                                            #password=\"ngModel\" type=\"password\" class=\"form-control floating\">\n                                        <label class=\"focus-label\">Password</label>\n                                        \n                                    </div>\n                                    <div class=\"alert alert-danger\" role=\"alert\"\n                                            *ngIf=\"f.submitted && password.invalid\">\n                                            <div *ngIf=\"password.errors.required\">Password is required</div>\n                                            <div *ngIf=\"password.errors.minlength\">\n                                                Password must be at least 6 characters\n                                            </div>\n                                        </div>\n                                    <div class=\"text-right\">\n                                        <a class=\"forgot-link\" routerLink=\"/doctor/forgot-password\">Forgot Password ?</a>\n                                    </div>\n                                    <button class=\"btn btn-primary btn-block btn-lg login-btn\"\n                                        type=\"submit\">Login</button>\n                                    \n                            </form>\n                        </div>\n                    </div>\n                </div>\n                <!-- /Login Tab Content -->\n\n            </div>\n        </div>\n\n    </div>\n\n</div>\n<!-- /Page Content -->","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-admin-profile',\n  templateUrl: './admin-profile.component.html',\n  styleUrls: ['./admin-profile.component.css']\n})\nexport class AdminProfileComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>admin-profile works!</p>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { TokenStorageService } from 'src/app/services/token-storage.service';\nimport { Appointment } from 'src/app/models/Appointment';\nimport { Doctor } from 'src/app/models/Doctor';\nimport { Patient } from 'src/app/models/Patient';\nimport { DoctorService } from 'src/app/services/doctor.service';\nimport { PatientService } from 'src/app/services/patient.service';\nimport { AppointmentService } from 'src/app/services/appointment.service';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { Location } from '@angular/common';\n\n@Component({\n  selector: 'app-booking',\n  templateUrl: './booking.component.html',\n  styleUrls: ['./booking.component.css']\n})\nexport class BookingComponent implements OnInit {\n  doctor:Doctor;\n  doctorAvatar:any\n  patient:Patient;\n  appointment:Appointment = new Appointment();\n  appointmentDate:string;\n  constructor(\n    private route:ActivatedRoute, \n    private location:Location,\n    private authService:AuthService,\n    private doctorService:DoctorService,\n    private patientService:PatientService,\n    private appointmentService:AppointmentService) { }\n\n  ngOnInit(): void {\n    this.route.params\n  .subscribe(\n    (params: Params) => {\n       params['id'];\n      this.doctorService.getById(params['id']).subscribe(res =>{\n        this.doctor = res;\n        this.appointment.doctorId = this.doctor.id;\n\n        console.log(\"Doctor: \" + this.doctor.id);\n      });\n      this.doctorService.getAvatar(params['id']).subscribe(avatar =>{\n        this.doctorAvatar = 'data:image/jpeg;base64,' + avatar?.image?.data;\n      })\n  });\n  this.authService.getCurrentUser().subscribe(user => {\n    this.patientService.getById(user.id).subscribe(res => {\n      this.patient = res;\n      this.appointment.patientId = this.patient.id;\n      console.log(\"Patient: \" + this.patient.id);\n    })\n  });\n  \n}\n\nonSubmit(){\n  console.log(\"date : \", this.appointmentDate);\n  console.log(JSON.stringify(this.appointment));\n  const appDate = new Date(this.appointmentDate);\n  const bookingDate = new Date(); //TODO cela devrait être fait à back-end\n  this.appointment.state = \"PENDING\";\n  this.appointment.appointmentDate = appDate.toISOString();\n  this.appointment.bookingDate = bookingDate.toISOString();\n  console.log(\"iso date\", appDate.toISOString());\n  console.log(\"appoin\", JSON.stringify(this.appointment));\n  this.appointmentService.add(this.appointment).subscribe(res => {\n    console.log(\"appointment added\", JSON.stringify(res));\n  });\n  this.location.back();\n}\n\n}\n","<!-- Breadcrumb -->\n<div class=\"breadcrumb-bar\">\n    <div class=\"container-fluid\">\n        <div class=\"row align-items-center\">\n            <div class=\"col-md-12 col-12\">\n                <nav aria-label=\"breadcrumb\" class=\"page-breadcrumb\">\n                    <ol class=\"breadcrumb\">\n                        <li class=\"breadcrumb-item\"><a href=\"index-2.html\">Home</a></li>\n                        <li class=\"breadcrumb-item active\" aria-current=\"page\">Booking</li>\n                    </ol>\n                </nav>\n                <h2 class=\"breadcrumb-title\">Booking</h2>\n            </div>\n        </div>\n    </div>\n</div>\n<!-- /Breadcrumb -->\n\n<!-- Page Content -->\n<div class=\"content\">\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"col-12\">\n                <div class=\"card\">\n                    <div class=\"card-body\">\n                        <div class=\"booking-doc-info\">\n                            <a routerLink=\"/doctor/profile/{{doctor.id}}\" class=\"booking-doc-img\">\n                                <img [src]=\"doctorAvatar\" alt=\"Doctor Image\">\n                            </a>\n                            <div class=\"booking-info\">\n                                <h4><a routerLink=\"/doctor/profile/{{doctor.id}}\">Dr. {{doctor?.firstname | titlecase }}\n                                        {{doctor?.lastname | titlecase }}</a></h4>\n                                <app-rating-star [ratedCount]=\"doctor?.rating\" [readonly]=\"true\"></app-rating-star>\n                                <span class=\"d-inline-block average-rating\">{{doctor?.averageRating}}</span>\n                            </div>\n                            <!-- <p class=\"text-muted mb-0\"><i class=\"fas fa-map-marker-alt\"></i> , </p> -->\n                        </div>\n                    </div>\n                </div>\n                <!-- Schedule Widget -->\n                <div class=\"card booking-schedule schedule-widget\">\n                    <!-- Schedule Content -->\n                    <div class=\"schedule-cont\">\n                        <div class=\"row\">\n                            <div class=\"col-md-12\">\n                                <div class=\"container\">\n                                    <div class=\"panel panel-primary\">\n                                        <div class=\"panel-heading\">Schedule an Appointment</div>\n                                        <div class=\"panel-body\">\n                                            <div class=\"row\">\n                                                <div class=\"col-md-8\">\n                                                    <div class=\"form-group\">\n                                                        <label class=\"control-label\">Description</label>\n                                                        <textarea [(ngModel)]=\"appointment.description\"\n                                                            class=\"form-control\" rows=\"5\"></textarea>\n                                                    </div>\n                                                </div>\n\n                                                <div class=\"col-md-4\">\n                                                    <div class=\"form-group\">\n                                                        <label class=\"control-label\">Appointment Date</label>\n                                                        <input [(ngModel)]=\"appointmentDate\" type=\"datetime-local\"\n                                                            class=\"form-control\" name=\"appointmentDate\">\n                                                    </div>\n                                                </div>\n\n                                            </div>\n                                            <input (click)=\"onSubmit()\" type=\"submit\" class=\"btn btn-primary\" value=\"Submit\">\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <!-- /Schedule Content -->\n\n                </div>\n                <!-- /Schedule Widget -->\n\n            </div>\n        </div>\n    </div>\n</div>","import { ContactService } from './../../../services/contact.service';\nimport { Router } from '@angular/router';\nimport { Contact } from './../../../models/Contact';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-contact',\n  templateUrl: './contact.component.html',\n  styleUrls: ['./contact.component.css']\n})\nexport class ContactComponent implements OnInit {\n\n  contact:Contact = new Contact();\n  submitted=false;\n\n  constructor(\n    private contactService:ContactService,\n    private router:Router) { }\n\n  ngOnInit(): void {\n  }\n \n  onSubmit(){\n    this.submitted = true;\n    console.log(\"submiting contact Contact \", JSON.stringify(this.contact));\n    this.contactService.addContact(this.contact).subscribe(res => {\n      console.log(\"submiting contact Contact \", JSON.stringify(res));\n      this.router.navigate(['home']);\n    })\n  }\n}\n","<section class=\"cmspage mtb-40\">\n    <div class=\"container\">\n      <div class=\"page-desc\" [hidden]=\"submitted\">\n        <div class=\"row justify-content-center\">\n          <div class=\"col-md-8\">\n            <h1>Contact</h1>\n            <form (ngSubmit)=\"onSubmit()\" #addContact=\"ngForm\">\n              <div class=\"form-group\">\n                <input type=\"text\" name=\"name\" id=\"name\" [(ngModel)]=\"contact.name\" class=\"form-control\" placeholder=\"Name\" required #name=\"ngModel\">\n                <div *ngIf=\"name.invalid && (name.dirty || name.touched)\" class=\"error\">\n                  <div *ngIf=\"name.errors.required\">\n                    Name is required.\n                  </div>\n                </div>\n              </div>\n              <div class=\"form-group\">\n                <input type=\"text\" name=\"email\" id=\"email\" [(ngModel)]=\"contact.email\" class=\"form-control\" placeholder=\"E-Mail\" required email #email=\"ngModel\">\n                <div *ngIf=\"email.invalid && (email.dirty || email.touched)\" class=\"error\">\n                  <div *ngIf=\"email.errors.required\">Email is required.</div>\n                  <div *ngIf=\"email.errors.email\">Email must be a valid email address.</div>\n                </div>\n              </div>\n              <div class=\"form-group\">\n                <input type=\"text\" name=\"phone\" id=\"phone\" [(ngModel)]=\"contact.phone\" class=\"form-control\" placeholder=\"Phone\">\n              </div>\n              <div class=\"form-group\">\n                <textarea name=\"message\" id=\"message\" [(ngModel)]=\"contact.message\" rows=\"5\" class=\"form-control\" placeholder=\"Message\" required #message=\"ngModel\"></textarea>\n                <div *ngIf=\"message.invalid && (message.dirty || message.touched)\" class=\"error\">\n                  <div *ngIf=\"message.errors.required\">Message is required.</div>\n                </div>\n              </div>\n              <div class=\"form-group\">\n                <button [disabled]=\"!addContact.form.valid\" class=\"btn btn-success\">Send Message</button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  </section>","import { Component, OnInit, Type } from '@angular/core';\nimport { Doctor } from 'src/app/models/Doctor';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { DoctorService } from 'src/app/services/doctor.service';\nimport { Clinic } from 'src/app/models/Clinic';\nimport { HttpEventType, HttpResponse } from '@angular/common/http';\nimport { ClinicLocation } from 'src/app/models/ClinicLocation';\n\n@Component({\n  selector: 'app-clinic-settings',\n  templateUrl: './clinic-settings.component.html',\n  styleUrls: ['./clinic-settings.component.css']\n})\nexport class ClinicSettingsComponent implements OnInit {\n\n  avatar:any;\n  doctor:Doctor;\n  clinic:Clinic;\n  clinicPhotos:Array<any>\n  specialities:string;\n  services:string;\n\n  uploadProgress:number;\n  uploadErrorMessage:string;\n  currentSelectedPhoto:any;\n  successMessage:string='';\n\n  constructor(private authService:AuthService, private doctorService:DoctorService) { }\n\n  ngOnInit(): void {\n    this.authService.getCurrentUser().subscribe(res => {\n      this.doctorService.getAvatar(res.id).subscribe(avatar => {\n        this.avatar = 'data:image/jpeg;base64,' + avatar?.image?.data;\n      });\n      this.doctorService.getById(res.id).subscribe(doctor => {\n        this.doctor = doctor;\n      });\n      this.doctorService.getClinic(res.id).subscribe(clinic => {\n        this.clinic = clinic;\n        console.log(\"Clinic : : \", JSON.stringify(this.clinic))\n        if (!!!this.clinic){\n          console.log(\"empty Clinic: \", JSON.stringify(this.clinic));\n          this.clinic = Clinic.empty();\n        }\n        this.services = this.clinic.services.join(', ');\n        this.specialities = this.clinic.specialities.join(', ');\n      });\n      this.doctorService.getClinicPhotos(res.id).subscribe(photos => {\n        photos = photos.filter((photo) => {\n          console.log(\"photo \", photo);\n          return photo !== null;\n        });\n        this.clinicPhotos = photos.map(photo => {\n          return {\n            \"id\": photo.id,\n            \"image\": 'data:image/jpeg;base64,' + photo.image.data\n          };\n        });\n      });\n    })\n  }\n\n  onSubmit(){\n    console.log(\"services: \", this.services.split(','));\n    console.log(\"services: \", this.specialities.split(','));\n    this.clinic.services = this.services.split(',');\n    this.clinic.specialities = this.specialities.split(',');\n    console.log(\"clinic new name: \", JSON.stringify(this.clinic));\n     this.doctorService.updateClinic(this.doctor.id, this.clinic).subscribe(clinic => {\n       this.clinic = clinic;\n       console.log(\"clinic: \", JSON.stringify(this.clinic))\n        this.successMessage = \"Change Saved\";\n        setTimeout(()=>{   \n          this.successMessage = '';\n     }, 3000);\n    });\n  }\n\n  deleteClinicPhoto(photoId:string){\n    console.log(\"Photo ID: \", photoId);\n    this.doctorService.deleteClinicPhoto(this.doctor.id, photoId).subscribe(res =>{\n      console.log(\"photo Deleted\", JSON.stringify(res));\n      this.doctorService.getClinicPhotos(this.doctor.id).subscribe(photos => {\n        console.log(JSON.stringify(photos));\n        // photos = photos.filter((photo, index, photos) => {\n        //   console.log(\"photo \", photo);\n        //   if(photo === null){\n        //     console.log(\"photo is null\");\n        //     photos = photos.slice(index, 1);\n        //   };\n        // });\n        photos = photos.filter((photo) => {\n          console.log(\"photo \", photo);\n          if(photo === null){\n            console.log(\"photo is null\");\n            return false;\n          };\n          return true;\n        });\n        console.log(\"photos after filter: \", JSON.stringify(photos));\n        this.clinicPhotos = photos.map(photo => {\n          console.log(\"photo : \", JSON.stringify(photo));\n          return {\n            \"id\": photo.id,\n            \"image\": 'data:image/jpeg;base64,' + photo.image.data\n          };\n        });\n      });\n    });\n  }\n\n\n  uploadClinicPhoto(event){\n    this.currentSelectedPhoto = event.target.files.item(0);\n    this.doctorService.uploadClinicPhoto(this.doctor.id,this.currentSelectedPhoto ).subscribe(\n      event => {\n        if (event.type === HttpEventType.UploadProgress) {\n          this.uploadProgress = Math.round(100 * event.loaded / event.total);\n        } else if (event instanceof HttpResponse) {\n          this.doctorService.getClinicPhotos(this.doctor.id).subscribe(photos => {\n            this.clinicPhotos = photos.map(photo => {\n              return {\n                \"id\": photo.id,\n                \"image\": 'data:image/jpeg;base64,' + photo.image.data\n              };\n            });\n            this.uploadProgress = 0;\n            this.currentSelectedPhoto = undefined;\n          });\n        }\n      },\n      err => {\n        this.uploadProgress = 0;\n        this.uploadErrorMessage = 'Could not upload the Photo!';\n        this.currentSelectedPhoto = undefined;\n      });\n  }\n\n  dragEnd(latitude:number, longitude:number){\n    console.log(\"latitude: \", latitude, \"longitude: \", longitude);\n    this.clinic.location.latitude = latitude;\n    this.clinic.location.longitude = longitude;\n    \n  }\n\n  zoomChange(zoom:number){\n    console.log(\"zoom: \", zoom);\n    this.clinic.location.zoom = zoom;\n    \n  }\n\n}\n","<div class=\"content\">\n    <div class=\"container-fluid\">\n        <div class=\"row\">\n            <div class=\"col-md-5 col-lg-4 col-xl-3 theiaStickySidebar\">\n                <app-doctor-side-bar [avatar]=\"avatar\"></app-doctor-side-bar>\n            </div>\n            <div class=\"col-md-7 col-lg-8 col-xl-9\">\n                <!-- Clinic Info -->\n                <div class=\"card\">\n                    <div class=\"card-body\">\n                        <h4 class=\"card-title\">Clinic Info</h4>\n                        <div class=\"row form-row\">\n                            <div class=\"col-md-6\">\n                                <div class=\"form-group\">\n                                    <label>Clinic Name</label>\n                                    <input type=\"text\" class=\"form-control\" [ngModel]=\"clinic?.name\"\n                                        (ngModelChange)=\"clinic.name=$event\">\n                                </div>\n                            </div>\n                            <div class=\"col-md-6\">\n                                <div class=\"form-group\">\n                                    <label>Clinic Full Address</label>\n                                    <input [value]=\"clinic?.address\" type=\"text\" class=\"form-control\"\n                                        [ngModel]=\"clinic?.address\" (ngModelChange)=\"clinic.address=$event\">\n                                </div>\n                            </div>\n                            <div class=\"col-md-6\">\n                                <div class=\"form-group\">\n                                    <label>Country</label>\n                                    <input [value]=\"clinic?.country\" type=\"text\" class=\"form-control\"\n                                        [ngModel]=\"clinic?.country\" (ngModelChange)=\"clinic.country=$event\">\n                                </div>\n                            </div>\n                            <div class=\"col-md-6\">\n                                <div class=\"form-group\">\n                                    <label>City</label>\n                                    <input [value]=\"clinic?.city\" [ngModel]=\"clinic?.city\"\n                                        (ngModelChange)=\"clinic.city=$event\" type=\"text\" class=\"form-control\">\n                                </div>\n                            </div>\n                            <div class=\"col-md-12\">\n                                <div class=\"form-group\">\n                                    <label>Description</label>\n                                    <textarea [value]=\"clinic?.description\" [ngModel]=\"clinic?.description\"\n                                        (ngModelChange)=\"clinic.description=$event\" class=\"form-control\"\n                                        rows=\"5\"></textarea>\n                                </div>\n                            </div>\n                            <div class=\"col-md-4\">\n                                <div class=\"form-group\">\n                                    <label>Min Price</label>\n                                    <input [value]=\"clinic?.minPrice\" [ngModel]=\"clinic?.minPrice\"\n                                        (ngModelChange)=\"clinic.minPrice=$event\" type=\"number\" class=\"form-control\">\n                                </div>\n                            </div>\n                            <div class=\"col-md-4\">\n                                <div class=\"form-group\">\n                                    <label>Max Price</label>\n                                    <input [value]=\"clinic?.maxPrice\" [ngModel]=\"clinic?.maxPrice\"\n                                        (ngModelChange)=\"clinic.maxPrice=$event\" type=\"number\" class=\"form-control\">\n                                </div>\n                            </div>\n                            <div class=\"col-md-4\">\n                                <div class=\"form-group\">\n                                    <label>Consulte Price</label>\n                                    <input [value]=\"clinic?.consultPrice\" [ngModel]=\"clinic?.consultPrice\"\n                                        (ngModelChange)=\"clinic.consultPrice=$event\" type=\"number\" class=\"form-control\">\n                                </div>\n                            </div>\n                            <div class=\"col-md-12\">\n                                <div class=\"form-group\">\n                                    <label>Clinic Images</label>\n                                    <!-- <form action=\"#\" class=\"dropzone\"></form> -->\n                                    <div *ngIf=\"currentSelectedPhoto\" class=\"progress\">\n                                        <div class=\"progress-bar progress-bar-info progress-bar-striped\"\n                                            role=\"progressbar\" attr.aria-valuenow=\"{{ uploadProgress }}\"\n                                            aria-valuemin=\"0\" aria-valuemax=\"100\"\n                                            [ngStyle]=\"{ width: uploadProgress + '%' }\">\n                                            {{ uploadProgress }}%\n                                        </div>\n                                    </div>\n                                    <div class=\"upload-img\">\n                                        <div class=\"change-photo-btn\">\n                                            <span><i class=\"fa fa-upload\"></i> Upload Photo</span>\n                                            <input type=\"file\" class=\"upload\" (change)=\"uploadClinicPhoto($event)\">\n                                        </div>\n                                        <small class=\"form-text text-muted\">Allowed JPG, GIF or PNG. Max size of\n                                            2MB</small>\n                                    </div>\n                                    <!-- <input type=\"file\" class=\"upload\" (change)=\"uploadClinicPhoto($event)\" /> -->\n                                </div>\n                                <div class=\"upload-wrap\">\n                                    <div *ngFor=\"let clinicPhoto of clinicPhotos\" class=\"upload-images\">\n                                        <img [src]=\"clinicPhoto?.image\" alt=\"Upload Image\">\n                                        <a (click)=\"deleteClinicPhoto(clinicPhoto?.id)\"\n                                            class=\"btn btn-icon btn-danger btn-sm\"><i class=\"far fa-trash-alt\"></i></a>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div class=\"col-md-12 mt-5\">\n                                <div class=\"form-group\">\n                                    <label>Services</label>\n                                    <input [value]=\"services\" [ngModel]=\"services\" (ngModelChange)=\"services=$event\"\n                                        type=\"text\" class=\"form-control\">\n                                    <small class=\"form-text text-muted\">Note : Type , to enter to multiple\n                                        Services</small>\n                                </div>\n                            </div>\n                            <div class=\"col-md-12\">\n                                <div class=\"form-group\">\n                                    <label>Specialisation</label>\n                                    <input [value]=\"specialities\" [ngModel]=\"specialities\"\n                                        (ngModelChange)=\"specialities=$event\" type=\"text\" class=\"form-control\">\n                                    <small class=\"form-text text-muted\">Note : Type , to enter to multiple\n                                        Specializations</small>\n                                </div>\n                            </div>\n                            <div *ngIf=\"clinic?.location\" class=\"col-md-12\">\n                                <div class=\"form-group\">\n                                    <label>Clinic Location</label>\n                                    <agm-map [latitude]=\"clinic.location.latitude\"\n                                        [longitude]=\"clinic.location.longitude\" [zoom]=\"clinic.location.zoom\"\n                                        (zoomChange)=\"zoomChange($event)\">\n                                        <agm-marker [latitude]=\"clinic.location.latitude\"\n                                            [longitude]=\"clinic.location.longitude\" [markerDraggable]=\"true\"\n                                            (dragEnd)=\"dragEnd($event.coords.lat, $event.coords.lng)\">\n                                        </agm-marker>\n                                    </agm-map>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <!-- /Clinic Info -->\n\n\n                <div class=\"submit-section submit-btn-bottom\">\n                    <button (click)=\"onSubmit()\" type=\"submit\" class=\"btn btn-primary submit-btn\">Save Changes</button>\n                </div>\n                <div *ngIf=\"successMessage\" class=\"alert alert-success\">\n                    <strong>Success!</strong> {{successMessage}}\n                </div>\n\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnInit, Input } from '@angular/core';\nimport { Appointment } from 'src/app/models/Appointment';\nimport { Patient } from 'src/app/models/Patient';\nimport { AppointmentService } from 'src/app/services/appointment.service';\nimport { PatientService } from 'src/app/services/patient.service';\n\n@Component({\n  selector: 'app-doctor-appointment',\n  templateUrl: './doctor-appointment.component.html',\n  styleUrls: ['./doctor-appointment.component.css']\n})\nexport class DoctorAppointmentComponent implements OnInit {\n\n  @Input() appointment:Appointment;\n  appointmentDate:Date;\n  patient:Patient;\n  avatar:any;\n  \n  constructor(\n    private appointmentService:AppointmentService,\n    private patientService:PatientService) { }\n\n  ngOnInit(): void {\n    this.appointmentDate = new Date(this.appointment.appointmentDate);\n    this.patientService.getById(this.appointment.patientId).subscribe(res => {\n      this.patient = res;\n    });\n    this.patientService.getAvatar(this.appointment.patientId).subscribe(avatar => {\n      this.avatar = 'data:image/jpeg;base64,' + avatar?.image?.data;\n    });\n  }\n\n  acceptAppointment(){\n    this.appointment.state = \"ACCEPTED\";\n    this.appointmentService.update(this.appointment).subscribe(res => {\n      this.appointment = res;\n    });\n  }\n\n  cancelAppointment(){\n    this.appointment.state = \"CANCELED\";\n    this.appointmentService.update(this.appointment).subscribe(res => {\n      this.appointment = res;\n    });\n  }\n\n  viewAppoitment(){\n    // navigate to appoitment page;\n  }\n}\n"," <!-- Appointment List -->\n <div class=\"appointment-list\">\n    <div class=\"profile-info-widget\">\n        <a routerLink=\"/patient/profile/{{patient.id}}\" class=\"booking-doc-img\">\n            <img [src]=\"avatar\" alt=\"Patient Image\">\n        </a>\n        <div class=\"profile-det-info\">\n            <h3><a routerLink=\"/patient/profile/{{patient.id}}\">{{patient.firstname | titlecase }} {{patient.lastname | titlecase }}</a></h3>\n            <div class=\"patient-details\">\n                <h5><i class=\"far fa-clock\"></i> {{appointmentDate | date:'full'}}</h5>\n                <!-- <h5><i class=\"fas fa-map-marker-alt\"></i> Newyork, United States</h5> -->\n                <h5 *ngIf=\"patient.email\"><i class=\"fas fa-envelope\"></i> {{patient.email}}</h5>\n                <h5 *ngIf=\"patient.phone\" class=\"mb-0\"><i class=\"fas fa-phone\"></i> {{patient.phone}}</h5>\n            </div>\n        </div>\n    </div>\n    <div class=\"appointment-action\">\n        <!-- <a (click)=\"viewAppointment()\" class=\"btn btn-sm bg-info-light\" data-toggle=\"modal\" data-target=\"#appt_details\">\n            <i class=\"far fa-eye\"></i> View\n        </a> -->\n        <a *ngIf=\"appointment.state == 'PENDING'\" (click)=\"acceptAppointment()\" class=\"btn btn-sm bg-success-light\">\n            <i class=\"fas fa-check\"></i> Accept\n        </a>\n        <a *ngIf=\"appointment.state == 'PENDING'\"  (click)=\"cancelAppointment()\" class=\"btn btn-sm bg-danger-light\">\n            <i class=\"fas fa-times\"></i> Cancel\n        </a>\n        <a *ngIf=\"appointment.state == 'ACCEPTED'\"  class=\"btn btn-sm bg-success-light\">\n            <i class=\"fas fa-times\"></i> {{appointment.state}}\n        </a>\n        <a *ngIf=\"appointment.state == 'CANCELED'\"  class=\"btn btn-sm  bg-danger-light\">\n            <i class=\"fas fa-times\"></i> {{appointment.state}}\n        </a>\n    </div>\n</div>\n<!-- /Appointment List -->\n","import { Component, OnInit } from '@angular/core';\nimport { Appointment } from 'src/app/models/Appointment';\nimport { Doctor } from 'src/app/models/Doctor';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { DoctorService } from 'src/app/services/doctor.service';\nimport { AppointmentService } from 'src/app/services/appointment.service';\n\n@Component({\n  selector: 'app-doctor-appointments',\n  templateUrl: './doctor-appointments.component.html',\n  styleUrls: ['./doctor-appointments.component.css']\n})\nexport class DoctorAppointmentsComponent implements OnInit {\n  avatar:any;\n  doctor:Doctor;\n  appointments:Appointment[];\n  constructor(\n    private autService:AuthService,\n    private doctorService:DoctorService,\n    private appotmentService:AppointmentService) { }\n\n  ngOnInit(): void {\n    this.autService.getCurrentUser().subscribe(user => {\n      this.doctorService.getById(user.id).subscribe(doctor => {\n        this.doctor = doctor;\n      });\n      this.doctorService.getAvatar(user.id).subscribe(avatar => {\n        this.avatar = 'data:image/jpeg;base64,' + avatar?.image?.data;\n      });\n      this.appotmentService.getAllDoctorAppoitments(user.id).subscribe(apps => {\n        this.appointments = apps;\n      })\n    });\n  }\n\n}\n","<!-- Breadcrumb -->\n<div class=\"breadcrumb-bar\">\n    <div class=\"container-fluid\">\n        <div class=\"row align-items-center\">\n            <div class=\"col-md-12 col-12\">\n                <nav aria-label=\"breadcrumb\" class=\"page-breadcrumb\">\n                    <ol class=\"breadcrumb\">\n                        <li class=\"breadcrumb-item\"><a routerLink=\"/home\">Home</a></li>\n                        <li class=\"breadcrumb-item active\" aria-current=\"page\">Appointments</li>\n                    </ol>\n                </nav>\n                <h2 class=\"breadcrumb-title\">Appointments</h2>\n            </div>\n        </div>\n    </div>\n</div>\n<!-- /Breadcrumb -->\n\n<!-- Page Content -->\n<div class=\"content\">\n    <div class=\"container-fluid\">\n        <div class=\"row\">\n            <div class=\"col-md-5 col-lg-4 col-xl-3 theiaStickySidebar\">\n                <app-doctor-side-bar [avatar]=\"avatar\"></app-doctor-side-bar>\n            </div>\n\n\n            <div class=\"col-md-7 col-lg-8 col-xl-9\">\n                <div class=\"appointments\">\n                    <app-doctor-appointment\n                    *ngFor=\"let appointment of appointments\" \n                    [appointment]=\"appointment\"></app-doctor-appointment>\n                    <div *ngIf=\"appointments.length === 0\" class=\"appointment-list\">\n                        <h6 >You Have No appointments</h6>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<!-- Page Content -->","import { Component, OnInit } from '@angular/core';\nimport { DoctorService } from 'src/app/services/doctor.service';\nimport { Password } from 'src/app/models/Password';\nimport { Doctor } from 'src/app/models/Doctor';\nimport { AuthService } from 'src/app/services/auth.service';\n\n@Component({\n  selector: 'app-doctor-change-password',\n  templateUrl: './doctor-change-password.component.html',\n  styleUrls: ['./doctor-change-password.component.css']\n})\nexport class DoctorChangePasswordComponent implements OnInit {\n\n  isPasswordFailed = false;\n  isPasswordSuccess = false;\n  errorMessage = '';\n  successMessage = '';\n  passwordMatch:boolean = true;\n  form:any = {};\n  doctor:Doctor;\n  avatar:any;\n  constructor(\n    private doctorSerive:DoctorService,\n    private authService:AuthService) { }\n\n  ngOnInit(): void {\n    this.authService.getCurrentUser().subscribe(user => {\n      this.doctorSerive.getById(user.id).subscribe(doc => {\n        this.doctor = doc;\n      });\n      this.doctorSerive.getAvatar(user.id).subscribe(avatar => {\n        this.avatar = 'data:image/jpeg;base64,' + avatar?.image?.data;\n      })\n    })\n  }\n\n  onSubmit(){\n    if (this.form.newPassword !== this.form.confirmPassword){\n      this.passwordMatch = false;\n      console.log(\"password does not match\");\n      return;\n    }\n    const password = new Password(this.form.oldPassword, this.form.newPassword);\n    this.doctorSerive.updatePassword(this.doctor.id, password).subscribe(message =>{\n      console.log(\"password success: \", JSON.stringify(message));\n      this.isPasswordSuccess = true;\n      this.successMessage = message.message;\n      setTimeout(() => this.successMessage = '', 2000);\n    }, err => {\n      this.isPasswordFailed = true;\n      console.log(\"password failed: \", JSON.stringify(err));\n      this.errorMessage = err.error.message;\n    });\n  }\n}\n","<div class=\"main-wrapper\">\n    <div class=\"breadcrumb-bar\">\n        <div class=\"container-fluid\">\n            <div class=\"row align-items-center\">\n                <div class=\"col-md-12 col-12\">\n                    <nav aria-label=\"breadcrumb\" class=\"page-breadcrumb\">\n                        <ol class=\"breadcrumb\">\n                            <li class=\"breadcrumb-item\"><a href=\"#\">Patient</a></li>\n                            <li class=\"breadcrumb-item active\" aria-current=\"page\">editPassword</li>\n                        </ol>\n                    </nav>\n                    <h2 class=\"breadcrumb-title\">Change Password</h2>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"content\">\n        <div class=\"container-fluid\">\n            <div class=\"row\">\n\n                <!-- Profile Sidebar -->\n                <div class=\"col-md-5 col-lg-4 col-xl-3 theiaStickySidebar\">\n                    <app-doctor-side-bar [avatar]=\"avatar\"></app-doctor-side-bar>\n                </div>\n\n\n                <div class=\"col-md-7 col-lg-8 col-xl-9\">\n                    <div class=\"card\">\n                        <div class=\"card-body\">\n                            <div class=\"row\">\n                                <div class=\"col-md-12 col-lg-6\">\n                                    <form  name=\"form\" (ngSubmit)=\"f.form.valid && onSubmit()\" #f=\"ngForm\" novalidate>\n                                        <input type=\"password\" class=\"form-control floating\" name=\"oldPassword\"\n                                            [(ngModel)]=\"form.oldPassword\" required minlength=\"8\" maxlength=\"20\"\n                                            #oldPassword=\"ngModel\">\n                                        <label class=\"focus-label\">Old Password</label>\n                                        <div class=\"alert-danger\" *ngIf=\"f.submitted && oldPassword.invalid\">\n                                            <div *ngIf=\"oldPassword.errors.required\">Password is required</div>\n                                            <div *ngIf=\"oldPassword.errors.minlength\">\n                                                Password must be at least 8 characters\n                                            </div>\n                                            <div *ngIf=\"oldPassword.errors.maxlength\">\n                                                Password must be at most 20 characters\n                                            </div>\n                                        </div>\n                                        <input type=\"password\" class=\"form-control floating\" name=\"newPassword\"\n                                            [(ngModel)]=\"form.newPassword\" required minlength=\"8\" maxlength=\"20\"\n                                            #newPassword=\"ngModel\">\n                                        <label class=\"focus-label\">New Password</label>\n                                        <div class=\"alert-danger\" *ngIf=\"f.submitted && newPassword.invalid\">\n                                            <div *ngIf=\"newPassword.errors.required  && !successMessage\">Password is required</div>\n                                            <div *ngIf=\"newPassword.errors.minlength\">\n                                                Password must be at least 8 characters\n                                            </div>\n                                            <div *ngIf=\"newPassword.errors.maxlength\">\n                                                Password must be at most 20 characters\n                                            </div>\n                                        </div>\n                                        <input type=\"password\" class=\"form-control floating\" name=\"confirmPassword\"\n                                            [(ngModel)]=\"form.confirmPassword\" required minlength=\"8\" maxlength=\"20\"\n                                            #confirmPassword=\"ngModel\">\n                                        <label class=\"focus-label\">Confirm New Password</label>\n                                        <div class=\"alert-danger\" *ngIf=\"f.submitted && confirmPassword.invalid\">\n                                            <div *ngIf=\"confirmPassword.errors.required && !successMessage\">Password is required</div>\n                                            <div *ngIf=\"confirmPassword.errors.minlength\">\n                                                Password must be at least 8 characters\n                                            </div>\n                                            <div *ngIf=\"confirmPassword.errors.maxlength\">\n                                                Password must be at most 20 characters\n                                            </div>\n                                            \n                                        </div>\n                                        <div class=\"alert alert-danger\"  *ngIf=\"!passwordMatch\">\n                                            new Password and Confirm Password must match\n                                        </div>\n                                        <div class=\"alert alert-danger\" *ngIf=\"f.submitted && isPasswordFailed\">\n                                            Password failed!<br />{{ errorMessage }}\n                                        </div>\n                                        <div class=\"alert alert-success\" *ngIf=\"f.submitted && successMessage \">\n                                            <br/>\n                                            <b>Success</b>{{ successMessage }}\n                                        </div>\n                                        <div class=\"submit-section\">\n                                            <button type=\"submit\" class=\"btn btn-primary submit-btn\">Submit</button>\n                                        </div>\n                                    </form>\n                                    <!-- /Change Password Form -->\n\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-doctor-dash-board',\n  templateUrl: './doctor-dash-board.component.html',\n  styleUrls: ['./doctor-dash-board.component.css']\n})\nexport class DoctorDashBoardComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>doctor-dash-board works!</p>\n","import { Component, OnInit } from '@angular/core';\nimport { Doctor } from 'src/app/models/Doctor';\nimport { DoctorService } from 'src/app/services/doctor.service';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { HttpEventType, HttpResponse } from '@angular/common/http';\n\n@Component({\n  selector: 'app-doctor-profile-settings',\n  templateUrl: './doctor-profile-settings.component.html',\n  styleUrls: ['./doctor-profile-settings.component.css']\n})\nexport class DoctorProfileSettingsComponent implements OnInit {\n\n  doctor:Doctor;\n  avatar:any;\n  currentSelectedAvatar:any;\n  uploadProgress:number;\n  uploadErrorMessage:string;\n\n  constructor(\n    private doctorService:DoctorService,\n    private authService:AuthService) { }\n\n  ngOnInit(): void {\n    this.authService.getCurrentUser().subscribe(res => {\n      this.doctorService.getById(res.id).subscribe(doc => {\n        this.doctor = doc;\n      });\n      this.doctorService.getAvatar(res.id).subscribe(avatar => {\n        this.avatar = 'data:image/jpeg;base64,' + avatar?.image?.data;\n      })\n    })\n  }\n\n  \n  onSubmit(){\n    console.log(\"clinic new name: \", JSON.stringify(this.doctor));\n     this.doctorService.updateDoctor(this.doctor).subscribe(doc => {\n       this.doctor = doc;\n       window.location.reload();\n    });\n  }\n\n\n  uploadAvatar(event){\n    this.currentSelectedAvatar = event.target.files.item(0);\n    this.doctorService.uploadAvatar(this.doctor.id,this.currentSelectedAvatar ).subscribe(\n      event => {\n        if (event.type === HttpEventType.UploadProgress) {\n          this.uploadProgress = Math.round(100 * event.loaded / event.total);\n        } else if (event instanceof HttpResponse) {\n          this.doctorService.getAvatar(this.doctor.id).subscribe(avatar => {\n            this.avatar = 'data:image/jpeg;base64,' + avatar.image.data\n            this.uploadProgress = 0;\n            this.currentSelectedAvatar = undefined;\n          });\n        }\n      },\n      err => {\n        this.uploadProgress = 0;\n        this.uploadErrorMessage = 'Could not upload the Photo!';\n        this.currentSelectedAvatar = undefined;\n      });\n  }\n}\n","<div class=\"content\">\n    <div class=\"container-fluid\">\n        <div *ngIf=\"doctor\" class=\"row\">\n            <div class=\"col-md-5 col-lg-4 col-xl-3 theiaStickySidebar\">\n               \n                <app-doctor-side-bar [avatar]=\"avatar\" ></app-doctor-side-bar>\n            </div>\n            <div class=\"col-md-7 col-lg-8 col-xl-9\">\n                <!-- Basic Information -->\n                <div class=\"card\">\n                    <div class=\"card-body\">\n                        <h4 class=\"card-title\">Basic Information</h4>\n                        <div class=\"row form-row\">\n                            <div class=\"col-md-12\">\n                                <div class=\"form-group\">\n                                    <div class=\"change-avatar\">\n                                        <div class=\"profile-img\">\n                                            <!-- <img [src]=\"avatar\" alt=\"Doctor Image\"> -->\n                                            <img *ngIf=\"avatar.length > 100\" [src]=\"avatar\" alt=\"Doctor Image\">\n                                            <img *ngIf=\"avatar.length < 100\" src=\"assets/img/doctors/default-doctor.png\"  alt=\"Doctor Image\">\n                                        </div>\n                                        <div class=\"upload-img\">\n                                            <div *ngIf=\"currentSelectedAvatar\" class=\"progress\">\n                                                <div class=\"progress-bar progress-bar-info progress-bar-striped\"\n                                                    role=\"progressbar\" attr.aria-valuenow=\"{{ uploadProgress }}\"\n                                                    aria-valuemin=\"0\" aria-valuemax=\"100\"\n                                                    [ngStyle]=\"{ width: uploadProgress + '%' }\">\n                                                    {{ uploadProgress }}%\n                                                </div>\n                                            </div>\n                                            <div class=\"change-photo-btn\">\n                                                <span><i class=\"fa fa-upload\"></i> Upload Photo</span>\n                                                <input type=\"file\" class=\"upload\" (change)=\"uploadAvatar($event)\">\n                                            </div>\n                                            <small class=\"form-text text-muted\">Allowed JPG, GIF or PNG. Max size of\n                                                2MB</small>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <div class=\"col-md-6\">\n                                <div class=\"form-group\">\n                                    <label>Username <span class=\"text-danger\">*</span></label>\n                                    <input [value]=\"doctor.username\" type=\"text\" class=\"form-control\" readonly>\n                                </div>\n                            </div>\n                            <div class=\"col-md-6\">\n                                <div class=\"form-group\">\n                                    <label>Email <span class=\"text-danger\">*</span></label>\n                                    <input [value]=\"doctor.email\" type=\"email\" class=\"form-control\" readonly>\n                                </div>\n                            </div>\n                            <div class=\"col-md-6\">\n                                <div class=\"form-group\">\n                                    <label>First Name <span class=\"text-danger\">*</span></label>\n                                    <input [value]=\"doctor.firstname\" [(ngModel)]=\"doctor.firstname\" type=\"text\" class=\"form-control\">\n                                </div>\n                            </div>\n                            <div class=\"col-md-6\">\n                                <div class=\"form-group\">\n                                    <label>Last Name <span class=\"text-danger\">*</span></label>\n                                    <input [value]=\"doctor.lastname\" [(ngModel)]=\"doctor.lastname\" type=\"text\" class=\"form-control\">\n                                </div>\n                            </div>\n                            <!-- <div class=\"col-md-6\">\n                                <div class=\"form-group\">\n                                    <label>Phone Number</label>\n                                    <input type=\"text\" class=\"form-control\">\n                                </div>\n                            </div> -->\n                            <!-- <div class=\"col-md-6\">\n                                <div class=\"form-group\">\n                                    <label>Gender</label>\n                                    <select class=\"form-control select\">\n                                        <option>Select</option>\n                                        <option>Male</option>\n                                        <option>Female</option>\n                                    </select>\n                                </div>\n                            </div> -->\n                            <!-- <div class=\"col-md-6\">\n                                <div class=\"form-group mb-0\">\n                                    <label>Date of Birth</label>\n                                    <input type=\"text\" class=\"form-control\">\n                                </div>\n                            </div> -->\n                            <div class=\"col-md-6\">\n                                <div class=\"form-group mb-0\">\n                                    <label>Speciality</label>\n                                    <input [value]=\"doctor.speciality\" [(ngModel)]=\"doctor.speciality\" type=\"text\" class=\"form-control\">\n                                </div>\n                            </div> \n                        </div>\n                    </div>\n                </div>\n                <!-- /Basic Information -->\n\n                <!-- About Me -->\n                <div class=\"card\">\n                    <div class=\"card-body\">\n                        <h4 class=\"card-title\">About Me</h4>\n                        <div class=\"form-group mb-0\">\n                            <label>Biography</label>\n                            <textarea [value]=\"doctor.aboutMe\" [(ngModel)]=\"doctor.aboutMe\" class=\"form-control\" rows=\"5\"></textarea>\n                        </div>\n                    </div>\n                </div>\n                <!-- /About Me -->\n\n                <div class=\"submit-section submit-btn-bottom\">\n                    <button (click)=\"onSubmit()\" type=\"submit\" class=\"btn btn-primary submit-btn\">Save Changes</button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnInit, Input } from '@angular/core';\nimport { Review } from 'src/app/models/Review';\nimport { Patient } from 'src/app/models/Patient';\nimport { PatientService } from 'src/app/services/patient.service';\n\n@Component({\n  selector: 'app-doctor-review',\n  templateUrl: './doctor-review.component.html',\n  styleUrls: ['./doctor-review.component.css']\n})\nexport class DoctorReviewComponent implements OnInit {\n\n  @Input() review:Review;\n  patient:Patient;\n  patientAvatar:any;\n  constructor(private patientService:PatientService) { }\n\n  ngOnInit(): void {\n    this.patientService.getById(this.review.patientId).subscribe(patient => {\n      this.patient = patient;\n    });\n    this.patientService.getAvatar(this.review.patientId).subscribe(avatar => {\n      this.patientAvatar = 'data:image/jpeg;base64,' + avatar.image.data;\n    })\n  }\n\n}\n","<li style=\"list-style: none;\">\n    <div class=\"comment\">\n        <!-- <img class=\"avatar avatar-sm rounded-circle\" alt=\"Patient Image\" [src]=\"patientAvatar\"> -->\n        <div class=\"comment-body\">\n            <div class=\"row pl-2\">\n                <div class=\"col-4\">\n                    <div class=\"row\">\n                        <img class=\"avatar avatar-sm rounded-circle\" alt=\"Patient Image\" [src]=\"patientAvatar\">\n                    </div>\n\n                    <div class=\"row mt-2\">\n                        <div class=\"meta-data\">\n                            <div class=\"row\">\n                                <span *ngIf=\"patient\" class=\"comment-author\">{{patient.firstname | titlecase}} {{patient.lastname | titlecase}}</span>\n                            </div>\n                            \n                            <div class=\"row mt-2\">\n                                <app-rating-star [ratedCount]=\"review?.rating\" [readonly]=\"true\"></app-rating-star>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"col-8\">\n                    <p class=\"comment-content\">\n                        {{review?.content}}\n                    </p>\n                </div>\n            </div>\n            \n            \n        </div>\n    </div>\n</li>\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { DoctorService } from 'src/app/services/doctor.service';\nimport { Review } from 'src/app/models/Review';\nimport { ReviewService } from 'src/app/services/review.service';\nimport { Doctor } from 'src/app/models/Doctor';\n\n@Component({\n  selector: 'app-doctor-reviews',\n  templateUrl: './doctor-reviews.component.html',\n  styleUrls: ['./doctor-reviews.component.css']\n})\nexport class DoctorReviewsComponent implements OnInit {\n\n  avatar:any;\n  doctor:Doctor;\n  reviews:Review[]\n  constructor(\n    private authService:AuthService,\n    private reviewService:ReviewService,\n    private doctorService:DoctorService\n  ) {\n    this.authService.getCurrentUser().subscribe(user => {\n      console.log(\"user \", JSON.stringify(user));\n      this.doctorService.getById(user.id).subscribe(doc => {\n        this.doctor = doc;\n      })\n      this.doctorService.getAvatar(user.id).subscribe(avatar => {\n        this.avatar = 'data:image/jpeg;base64,' + avatar?.image?.data;\n      });\n      this.reviewService.getReviews(user.id).subscribe(reviews => {\n        this.reviews = reviews;\n      });\n    });\n   }\n\n  ngOnInit(): void {\n    \n  }\n\n}\n","<div class=\"main-wrapper\">\n    <div class=\"breadcrumb-bar\">\n        <div class=\"container-fluid\">\n            <div class=\"row align-items-center\">\n                <div class=\"col-md-12 col-12\">\n                    <nav aria-label=\"breadcrumb\" class=\"page-breadcrumb\">\n                        <ol class=\"breadcrumb\">\n                            <li class=\"breadcrumb-item\"><a href=\"#\">Patient</a></li>\n                            <li class=\"breadcrumb-item active\" aria-current=\"page\">editPassword</li>\n                        </ol>\n                    </nav>\n                    <h2 class=\"breadcrumb-title\">Change Password</h2>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"content\">\n        <div class=\"container-fluid\">\n            <div class=\"row\">\n                <!-- Profile Sidebar -->\n                <div class=\"col-md-5 col-lg-4 col-xl-3 theiaStickySidebar\">\n                    <app-doctor-side-bar [avatar]=\"avatar\"></app-doctor-side-bar>\n                </div>\n                <div class=\"col-md-7 col-lg-8 col-xl-9\">\n                    <div class=\"card\">\n                        <div class=\"card-body\">\n                            <div class=\"row\">\n                                <div class=\"col-md-12\">\n                                    <!-- <div class=\"widget review-listing\">\n                                        \n                                        \n                                        </ul>\n                                    </div> -->\n                                    <ul class=\"comments-list\">\n                                        <app-doctor-review *ngFor=\"let review of reviews\" [review]=\"review\">\n                                        </app-doctor-review>\n                                        <li style=\"list-style: none\" *ngIf=\"reviews.length === 0\" class=\"appointments\">\n                                            <h6>You Have No Reviews</h6>\n                                        </li>\n                                    </ul>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnInit, Input } from '@angular/core';\nimport { Doctor } from 'src/app/models/Doctor';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { DoctorService } from 'src/app/services/doctor.service';\nimport { TokenStorageService } from 'src/app/services/token-storage.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-doctor-side-bar',\n  templateUrl: './doctor-side-bar.component.html',\n  styleUrls: ['./doctor-side-bar.component.css']\n})\nexport class DoctorSideBarComponent implements OnInit {\n\n  @Input() avatar: any;\n  // @Input() doctor:Doctor;\n  showDefaultAvatar: boolean = false;\n  doctor: Doctor;\n  // avatar:any;\n  constructor(private authService: AuthService,\n    private doctorService: DoctorService,\n    private tokenStorageService: TokenStorageService,\n    private router: Router) { }\n\n  ngOnInit(): void {\n    this.authService.getCurrentUser().subscribe(user => {\n      this.doctorService.getById(user.id).subscribe(doc => {\n        this.doctor = doc;\n        console.log(\"print avatar : \", this.avatar);\n        // if (!this.avatar) {\n        //   this.showDefaultAvatar = true;\n        //   console.log(\"show default\");\n        // } else {\n        //   this.showDefaultAvatar = false;\n        // }\n      });\n      \n      // this.doctorService.getAvatar(user.id).subscribe(avatar => {\n      //   this.avatar = 'data:image/jpeg;base64,' + avatar?.image?.data;\n      // // });\n      // if (!this.avatar) {\n      //   this.showDefaultAvatar = true;\n      //   console.log(\"show default\");\n      // } else {\n      //   this.showDefaultAvatar = false;\n      // }\n\n    })\n  }\n\n  logout() {\n    this.tokenStorageService.signOut();\n    //window.location.reload();\n    this.router.navigate([\"home\"]).then(() => {\n      window.location.reload();\n    });\n  }\n\n\n}\n","<!-- Profile Sidebar -->\n<div class=\"profile-sidebar\">\n    <div class=\"widget-profile pro-widget-content\">\n        <div class=\"profile-info-widget\">\n            <a href=\"#\" class=\"booking-doc-img\">\n                <img *ngIf=\"avatar.length > 100\" [src]=\"avatar\" alt=\"Doctor Image\">\n                <img *ngIf=\"avatar.length < 100\" src=\"assets/img/doctors/default-doctor.png\"  alt=\"Doctor Image\">\n            </a>\n            <div class=\"profile-det-info\">\n                <h3>Dr. {{doctor?.firstname | titlecase}} {{doctor?.lastname | titlecase }}</h3>\n\n                <div class=\"patient-details\">\n                    <h5 class=\"mb-0\">{{doctor?.speciality | titlecase }}</h5>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"dashboard-widget\">\n        <nav class=\"dashboard-menu\">\n            <ul>\n                <!-- <li routerLinkActive=\"active\">\n                    <a routerLink=\"/doctor/dashboard\">\n                        <i class=\"fas fa-columns\"></i>\n                        <span>Dashboard</span>\n                    </a>\n                </li> -->\n                <li  routerLinkActive=\"active\">\n                    <a routerLink=\"/doctor/appointments\">\n                        <i class=\"fas fa-calendar-check\"></i>\n                        <span>Appointments</span>\n                    </a>\n                </li>\n                <!-- <li routerLinkActive=\"active\">\n                    <a routerLink=\"/doctor/patients\">\n                        <i class=\"fas fa-user-injured\"></i>\n                        <span>My Patients</span>\n                    </a>\n                </li> -->\n                <li routerLinkActive=\"active\">\n                    <a routerLink=\"/doctor/reviews\">\n                        <i class=\"fas fa-star\"></i>\n                        <span>Reviews</span>\n                    </a>\n                </li>\n\n                <li routerLinkActive=\"active\">\n                    <a routerLink=\"/doctor/profile-settings\">\n                        <i class=\"fas fa-user-cog\"></i>\n                        <span>Profile Settings</span>\n                    </a>\n                </li>\n\n                <li routerLinkActive=\"active\">\n                    <a routerLink=\"/doctor/clinic-settings\">\n                        <i class=\"fas fa-user-cog\"></i>\n                        <span>Clinic Settings</span>\n                    </a>\n                </li>\n\n                <li routerLinkActive=\"active\">\n                    <a routerLink=\"/doctor/change-password\">\n                        <i class=\"fas fa-lock\"></i>\n                        <span>Change Password</span>\n                    </a>\n                </li>\n                <li (click)=\"logout()\">\n                    <a href=\"#\">\n                        <i class=\"fas fa-sign-out-alt\"></i>\n                        <span>Logout</span>\n                    </a>\n                </li>\n            </ul>\n        </nav>\n    </div>\n</div>\n<!-- /Profile Sidebar -->\n\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../../../../services/auth.service'\nimport { TokenStorageService } from '../../../../services/token-storage.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { User } from 'src/app/models/User';\n\n\n@Component({\n  selector: 'app-doctor-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  form: any = {};\n  isLoggedIn = false;\n  isLoginFailed = false;\n  errorMessage = '';\n  roles: string[] = [];\n  retUrl:string = \"doctor/profile\";\n\n  constructor(\n    private authService: AuthService,\n    private tokenStorage: TokenStorageService,\n    private router:Router,\n    private activatedRoute:ActivatedRoute) { }\n\n  ngOnInit() {\n    if (this.tokenStorage.getToken()) {\n      this.isLoggedIn = true;\n      this.roles = this.tokenStorage.getUser().roles;\n    }\n    this.activatedRoute.queryParamMap\n                .subscribe(params => {\n            this.retUrl = params.get('retUrl'); \n            console.log( 'LoginComponent/ngOnInit '+ this.retUrl);\n        });\n  }\n\n  onSubmit() {\n    this.authService.doctorLogin(this.form).subscribe(\n      (user:User) => {\n        this.tokenStorage.saveToken(user.accessToken);\n        this.tokenStorage.saveUser(user);\n        this.tokenStorage.saveUserType(user.userType);\n\n        this.isLoginFailed = false;\n        this.isLoggedIn = true;\n        this.roles = this.tokenStorage.getUser().roles;\n        this.authService.getLoggedInUser.emit(user);\n        console.log(\"login successful\");\n        console.log(this.tokenStorage.getUser());\n        console.log( 'return to '+ this.retUrl);\n           if (this.retUrl!=null) {\n                this.router.navigate( [this.retUrl]);\n           } else {\n                this.router.navigate( ['doctor/appointments']);\n           }\n           \n        \n      },\n      err => {\n        this.errorMessage = err.error.message;\n        this.isLoginFailed = true;\n      }\n    );\n  }\n\n  \n}","<div class=\"content \">\n    <div class=\"container-fluid\">\n        <div class=\"row\">\n            <div class=\"col-md-8 offset-md-2\">\n\n                <!-- Login Tab Content -->\n                <div class=\"account-content\">\n                    <div class=\"row align-items-center justify-content-center\">\n                        <div class=\"col-md-7 col-lg-6 login-left\">\n                            <img src=\"assets/img/login-banner.png\" class=\"img-fluid\" alt=\"Doccure Login\">\n                        </div>\n                        <div class=\"col-md-12 col-lg-6 login-right\">\n                            <div class=\"login-header\">\n                                <h3>Login <span>AirDoc</span></h3>\n                            </div>\n                            <form *ngIf=\"!isLoggedIn\" name=\"form\" (ngSubmit)=\"f.form.valid && onSubmit()\" #f=\"ngForm\"\n                                novalidate>\n                                <div class=\"form-group\">\n                                    <div\n                                      class=\"alert alert-danger\"\n                                      role=\"alert\"\n                                      *ngIf=\"f.submitted && isLoginFailed\"\n                                    >\n                                      Login failed: {{ errorMessage }}\n                                    </div>\n                                  </div>\n                                <div class=\"form-group form-focus\">\n                                    <input class=\"form-control\" name=\"email\" [(ngModel)]=\"form.email\" required\n                                        #email=\"ngModel\" type=\"email\" class=\"form-control floating\">\n                                    <label class=\"focus-label\">Email</label>\n                                    \n                                    </div>\n                                    <div class=\"alert alert-danger\" role=\"alert\" *ngIf=\"f.submitted && email.invalid\"> Email is required!</div>\n                                    <div class=\"form-group form-focus\">\n                                        <input name=\"password\" [(ngModel)]=\"form.password\" required minlength=\"6\"\n                                            #password=\"ngModel\" type=\"password\" class=\"form-control floating\">\n                                        <label class=\"focus-label\">Password</label>\n                                        \n                                    </div>\n                                    <div class=\"alert alert-danger\" role=\"alert\"\n                                            *ngIf=\"f.submitted && password.invalid\">\n                                            <div *ngIf=\"password.errors.required\">Password is required</div>\n                                            <div *ngIf=\"password.errors.minlength\">\n                                                Password must be at least 6 characters\n                                            </div>\n                                        </div>\n                                    <div class=\"text-right\">\n                                        <a class=\"forgot-link\" routerLink=\"/doctor/forgot-password\">Forgot Password ?</a>\n                                    </div>\n                                    <button class=\"btn btn-primary btn-block btn-lg login-btn\"\n                                        type=\"submit\">Login</button>\n                                    <div class=\"text-center dont-have\">Don’t have an account? <a\n                                            routerLink=\"/doctor/signup\">Register</a></div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n                <!-- /Login Tab Content -->\n\n            </div>\n        </div>\n\n    </div>\n\n</div>\n<!-- /Page Content -->","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { Doctor } from 'src/app/models/Doctor';\nimport { DoctorService } from 'src/app/services/doctor.service';\nimport { TokenStorageService } from 'src/app/services/token-storage.service';\nimport { Clinic } from 'src/app/models/Clinic';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\nexport class ProfileComponent implements OnInit {\n\n  doctor:Doctor;\n  clinic:Clinic;\n  avatar:any;\n  showDefaultAvatar:boolean = false;\n  clinicPhotos:Array<any>\n  id:string = \"\";\n  isPatient:boolean=false;\n  constructor(private route:ActivatedRoute,\n    private doctorService:DoctorService, \n    private tokenStorage:TokenStorageService) { }\n\n  ngOnInit(){\n    this.route.params\n  .subscribe(\n    (params: Params) => {\n      this.id = params['id'];\n      console.log(\"Doctor id\" + this.id);\n      //Get Doctor\n      this.doctorService.getById(this.id).subscribe(res => {\n        this.doctor = res;\n        console.log(\"rating: \", this.doctor.rating);\n      });\n      this.doctorService.getAvatar(this.id).subscribe(res => {\n        this.avatar = 'data:image/jpeg;base64,' + res?.image?.data;\n        console.log(\"print avatar : \", this.avatar);\n        if (res?.image?.data === undefined){\n          this.showDefaultAvatar = true;\n          console.log(\"show default\");\n          \n        }\n      });\n      this.doctorService.getClinic(this.id).subscribe(res => {\n        this.clinic = res;\n        console.log(\"clinic from Profile\", this.clinic);\n      });\n      this.doctorService.getClinicPhotos(this.id).subscribe(res => {\n        //Convert image to base64 and return it;\n        this.clinicPhotos = res.map(photo => 'data:image/jpeg;base64,' + photo.image.data);\n      });\n      this.isPatient = this.tokenStorage.getUserType() == \"PATIENT\";\n      \n      \n    }\n  );\n  }\n\n  refresh(){\n    this.doctorService.getById(this.doctor.id).subscribe(res => {\n      this.doctor = res;\n    })\n  }\n\n  \n}\n","<div class=\"content\">\n\t<div class=\"container\">\n\t\t<!-- Doctor Widget -->\n\t\t<div class=\"card\">\n\t\t\t<div class=\"card-body\">\n\t\t\t\t<div class=\"doctor-widget\">\n\t\t\t\t\t<div class=\"doc-info-left\">\n\t\t\t\t\t\t<div class=\"doctor-img\">\n\t\t\t\t\t\t\t<!-- <img [src]=\"avatar\" class=\"img-fluid\" alt=\"Doctor Image\"> -->\n\t\t\t\t\t\t\t<img *ngIf=\"!showDefaultAvatar\" [src]=\"avatar\" class=\"img-fluid\" alt=\"Doctor Image\">\n                \t\t\t<img *ngIf=\"showDefaultAvatar\" src=\"assets/img/doctors/default-doctor.png\" class=\"img-fluid\" alt=\"Doctor Image\">\n            \n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"doc-info-cont\">\n\t\t\t\t\t\t\t<h4 class=\"doc-name\">Dr. {{doctor?.firstname | titlecase}} {{doctor?.lastname | titlecase}}\n\t\t\t\t\t\t\t</h4>\n\t\t\t\t\t\t\t<p class=\"doc-speciality\">{{doctor?.speciality | titlecase}}</p>\n\t\t\t\t\t\t\t<div *ngIf=\"doctor?.rating\" class=\"rating\">\n\t\t\t\t\t\t\t\t<app-rating-star [ratedCount]=\"doctor.rating\" ></app-rating-star>\n\t\t\t\t\t\t\t\t<span class=\"d-inline-block average-rating\">({{doctor?.averageRating}})</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t<div class=\"clinic-details\">\n\t\t\t\t\t\t\t\t<p class=\"doc-location\"><i class=\"fas fa-map-marker-alt\"></i>\n\t\t\t\t\t\t\t\t\t{{clinic?.city | titlecase}}, {{clinic?.country | titlecase}} </p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"clinic-services\">\n\t\t\t\t\t\t\t\t<span *ngFor=\"let service of clinic?.services\">{{service}}</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"doc-info-right\">\n\t\t\t\t\t\t<div class=\"clini-infos\">\n\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t<li><i class=\"far fa-comment\"></i> {{doctor?.averageRating}} Feedback</li>\n\t\t\t\t\t\t\t\t<li><i class=\"fas fa-map-marker-alt\"></i> {{clinic?.city | titlecase}},\n\t\t\t\t\t\t\t\t\t{{clinic?.country | titlecase}}</li>\n\t\t\t\t\t\t\t\t<li><i class=\"far fa-money-bill-alt\"></i> {{clinic?.maxPrice | currency}} per hour\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"clinic-booking\">\n\t\t\t\t\t\t\t<a class=\"apt-btn\" routerLink=\"/booking/{{doctor?.id}}\">Book Appointment</a>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<!-- /Doctor Widget -->\n\n\n\t\t<!-- Doctor Details Tab -->\n\t\t<div class=\"card\">\n\n\n\t\t\t<div class=\"card-body pt-0\">\n\n\t\t\t\t<!-- Tab Menu -->\n\t\t\t\t<nav class=\"user-tabs mb-4\">\n\n\t\t\t\t\t<ul class=\"nav nav-tabs nav-tabs-bottom nav-justified\">\n\t\t\t\t\t\t<li class=\"nav-item\">\n\t\t\t\t\t\t\t<a class=\"nav-link active\" href=\"#doc_overview\" data-toggle=\"tab\">Overview</a>\n\t\t\t\t\t\t</li>\n\n\t\t\t\t\t\t<li class=\"nav-item\">\n\t\t\t\t\t\t\t<a class=\"nav-link\" href=\"#doc_clinic\" data-toggle=\"tab\">Clinic</a>\n\t\t\t\t\t\t</li>\n\n\t\t\t\t\t\t<li class=\"nav-item\">\n\t\t\t\t\t\t\t<a class=\"nav-link\" href=\"#doc_reviews\" data-toggle=\"tab\">Reviews</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\n\t\t\t\t</nav>\n\t\t\t\t<!-- /Tab Menu -->\n\n\n\t\t\t\t<!-- Tab Content -->\n\t\t\t\t<div class=\"tab-content pt-0\">\n\t\t\t\t\t<!-- Overview Content -->\n\t\t\t\t\t<div role=\"tabpanel\" id=\"doc_overview\" class=\"tab-pane fade show active\">\n\t\t\t\t\t\t<app-over-view [doctor]=\"doctor\" [clinic]=\"clinic\"></app-over-view>\n\t\t\t\t\t</div>\n\t\t\t\t\t<!-- /Overview Content -->\n\n\t\t\t\t\t<!-- Locations Content -->\n\t\t\t\t\t<div role=\"tabpanel\" id=\"doc_clinic\" class=\"tab-pane fade\">\n\t\t\t\t\t\t<!-- Location List -->\n\t\t\t\t\t\t<div class=\"location-list\">\n\t\t\t\t\t\t\t<app-clinic *ngIf=\"clinic\" [clinic]=\"clinic\" [doctor]=\"doctor\" ></app-clinic>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<!-- /Location List -->\n\t\t\t\t\t</div>\n\t\t\t\t\t<!-- /Locations Content -->\n\n\t\t\t\t\t<!-- Reviews Content -->\n                    <div role=\"tabpanel\" id=\"doc_reviews\" class=\"tab-pane fade\">\n\t\t\t\t\t\t<app-reviews (refresh)=\"refresh()\"  *ngIf=\"doctor\" [doctor]=\"doctor\" [isPatient]=\"isPatient\"></app-reviews>\n\t\t\t\t\t</div>\n                    <!-- /Reviews Content -->\n\n\n\t\t\t\t</div>\n\t\t\t\t<!-- /Tab Content -->\n\t\t\t</div>\n\n\n\t\t</div>\n\t\t<!-- /Doctor Details Tab -->\n\n\n\n\t</div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-doctor-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.css']\n})\nexport class SignupComponent implements OnInit {\n\n  form: any = {};\n  isSuccessful = false;\n  isSignUpFailed = false;\n  errorMessage = '';\n\n  constructor(private router:Router, private authService: AuthService) { }\n\n  ngOnInit() {\n  }\n\n  onSubmit() {\n    this.authService.doctorRegister(this.form).subscribe(\n      data => {\n        console.log(data);\n        this.isSuccessful = true;\n        this.isSignUpFailed = false;\n        this.router.navigate([\"doctor/login\"]);\n        \n      },\n      err => {\n        this.errorMessage = err.error.message;\n        this.isSignUpFailed = true;\n      }\n    );\n  }\n}\n","<div class=\"content\">\n    <div class=\"container-fluid\">\n        <div class=\"row\">\n            <div class=\"col-md-8 offset-md-2\">\n\n                <!-- Account Content -->\n                <div class=\"account-content\">\n                    <div class=\"row align-items-center justify-content-center\">\n                        <div class=\"col-md-7 col-lg-6 login-left\">\n                            <img src=\"assets/img/login-banner.png\" class=\"img-fluid\" alt=\"Login Banner\">\n                        </div>\n                        <div class=\"col-md-12 col-lg-6 login-right\">\n                            <div class=\"login-header\">\n                                <h3>Doctor Register <a routerLink=\"patient/signup\">Not a Doctor?</a></h3>\n                            </div>\n\n                            <!-- Register Form -->\n                            <form *ngIf=\"!isSuccessful\" name=\"form\" (ngSubmit)=\"f.form.valid && onSubmit()\" #f=\"ngForm\"\n                                novalidate>\n                                \n                                <div class=\"form-group form-focus\">\n                                    <input type=\"text\" class=\"form-control floating\" name=\"firstname\"\n                                        [(ngModel)]=\"form.firstname\" required minlength=\"3\" maxlength=\"20\"\n                                        #firstname=\"ngModel\">\n                                    <label class=\"focus-label\">First Name</label>\n                                    <div class=\"alert-danger\" *ngIf=\"f.submitted && firstname.invalid\">\n                                        <div *ngIf=\"firstname.errors.required\">First Name is required</div>\n                                        <div *ngIf=\"firstname.errors.minlength\">\n                                            First Name must be at least 3 characters\n                                        </div>\n                                        <div *ngIf=\"firstname.errors.maxlength\">\n                                            First Name must be at most 20 characters\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"form-group form-focus\">\n                                    <input type=\"text\" class=\"form-control floating\" name=\"lastname\"\n                                        [(ngModel)]=\"form.lastname\" required minlength=\"3\" maxlength=\"20\"\n                                        #lastname=\"ngModel\">\n                                    <label class=\"focus-label\">Last Name</label>\n                                    <div class=\"alert-danger\" *ngIf=\"f.submitted && lastname.invalid\">\n                                        <div *ngIf=\"lastname.errors.required\">Last Name is required</div>\n                                        <div *ngIf=\"lastname.errors.minlength\">\n                                            Last Name must be at least 3 characters\n                                        </div>\n                                        <div *ngIf=\"username.errors.maxlength\">\n                                            Last Name must be at most 20 characters\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"form-group form-focus\">\n                                    <input type=\"text\" class=\"form-control floating\" name=\"username\"\n                                        [(ngModel)]=\"form.username\" required minlength=\"3\" maxlength=\"20\"\n                                        #username=\"ngModel\">\n                                    <label class=\"focus-label\">Username</label>\n                                    <div class=\"alert-danger\" *ngIf=\"f.submitted && username.invalid\">\n                                        <div *ngIf=\"username.errors.required\">Username is required</div>\n                                        <div *ngIf=\"username.errors.minlength\">\n                                            Username must be at least 3 characters\n                                        </div>\n                                        <div *ngIf=\"username.errors.maxlength\">\n                                            Username must be at most 20 characters\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"form-group form-focus\">\n                                    <input type=\"tel\" class=\"form-control floating\" name=\"phone\"\n                                    [(ngModel)]=\"form.phone\" required minlength=\"8\" maxlength=\"20\"\n                                    #phone=\"ngModel\">\n                                    <label class=\"focus-label\">Phone Number</label>\n                                    <div class=\"alert-danger\" *ngIf=\"f.submitted && phone.invalid\">\n                                        <div *ngIf=\"phone.errors.required\">Phone Number is required</div>\n                                        <div *ngIf=\"phone.errors.minlength\">\n                                            Phone Number must be at least 8 characters\n                                        </div>\n                                        <div *ngIf=\"phone.errors.maxlength\">\n                                            Phone Number must be at most 20 characters\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"form-group form-focus\">\n                                    <input type=\"email\" class=\"form-control floating\" name=\"email\"\n                                        [(ngModel)]=\"form.email\" required minlength=\"10\" maxlength=\"50\"\n                                        #email=\"ngModel\">\n                                    <label class=\"focus-label\">Email</label>\n                                    <div class=\"alert-danger\" *ngIf=\"f.submitted && email.invalid\">\n                                        <div *ngIf=\"email.errors.required\">Email is required</div>\n                                        <div *ngIf=\"email.errors.minlength\">\n                                            Email must be at least 10 characters\n                                        </div>\n                                        <div *ngIf=\"email.errors.maxlength\">\n                                            Email must be at most 50 characters\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"form-group form-focus\">\n                                    <input type=\"password\" class=\"form-control floating\" name=\"password\"\n                                    [(ngModel)]=\"form.password\" required minlength=\"8\" maxlength=\"20\"\n                                    #password=\"ngModel\">\n                                    <label class=\"focus-label\">Create Password</label>\n                                    <div class=\"alert-danger\" *ngIf=\"f.submitted && password.invalid\">\n                                        <div *ngIf=\"password.errors.required\">Password is required</div>\n                                        <div *ngIf=\"password.errors.minlength\">\n                                            Password must be at least 8 characters\n                                        </div>\n                                        <div *ngIf=\"password.errors.maxlength\">\n                                            Password must be at most 20 characters\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"text-right\">\n                                    <a class=\"forgot-link\" routerLink=\"/doctor/login\">Already have an account?</a>\n                                </div>\n                                <button class=\"btn btn-primary btn-block btn-lg login-btn\" type=\"submit\">Signup</button>\n                                <div class=\"alert alert-warning\" *ngIf=\"f.submitted && isSignUpFailed\">\n                                    Signup failed!<br />{{ errorMessage }}\n                                </div>\n                            </form>\n                            <div class=\"alert alert-success\" *ngIf=\"isSuccessful\">\n                                Your registration is successful!\n                              </div>\n                            <!-- /Register Form -->\n\n                        </div>\n                    </div>\n                </div>\n                <!-- /Account Content -->\n\n            </div>\n        </div>\n\n    </div>\n\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor(private router:Router) { }\n\n  ngOnInit(): void {\n  }\n  \n  search(city:string, query:string){\n    console.log(\"city: \" + city, \"query : \" + query);\n    this.router.navigate([\"search\"], { queryParams: { \"city\": city, \"query\": query} });\n  }\n}\n","<section class=\"section section-search\">\n    <div class=\"container-fluid\">\n        <div class=\"banner-wrapper\">\n            <div class=\"banner-header text-center\">\n                <h1>Search Doctor, Make an Appointment</h1>\n                <p>Discover the best doctors, clinic & hospital the city nearest to you.</p>\n            </div>\n             \n            <!-- Search -->\n            <div class=\"search-box\">\n                <form action=\"templateshub.net\">\n                    <div class=\"form-group search-location\">\n                        <input #city type=\"text\" class=\"form-control\" placeholder=\"Search City\">\n                        <span class=\"form-text\">Based on your City</span>\n                    </div>\n                    <div class=\"form-group search-info\">\n                        <input #query type=\"text\" class=\"form-control\" placeholder=\"Search Doctors, Clinics, Hospitals, Diseases Etc\">\n                        <span class=\"form-text\">Ex : Dental or Sugar Check up etc</span>\n                    </div>\n                    <button (click)=\"search(city.value, query.value)\" type=\"submit\" class=\"btn btn-primary search-btn\"><i class=\"fas fa-search\"></i> <span>Search</span></button>\n                </form>\n            </div>\n            <!-- /Search -->\n            \n        </div>\n    </div>\n</section>\n<!-- /Home Banner -->\n","import { Component, OnInit } from '@angular/core';\nimport { Patient } from 'src/app/models/Patient';\nimport { PatientService } from 'src/app/services/patient.service';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { Password } from 'src/app/models/Password';\n\n@Component({\n  selector: 'app-change-password',\n  templateUrl: './change-password.component.html',\n  styleUrls: ['./change-password.component.css']\n})\nexport class ChangePasswordComponent implements OnInit {\n\n  isPasswordFailed = false;\n  isPasswordSuccess = false;\n  errorMessage = '';\n  successMessage = '';\n  passwordMatch:boolean = true;\n  form:any = {};\n  patient:Patient;\n  avatar:any;\n  constructor(\n    private patientService:PatientService,\n    private authService:AuthService) { }\n\n  ngOnInit(): void {\n    this.authService.getCurrentUser().subscribe(user => {\n      this.patientService.getById(user.id).subscribe(patient => {\n        this.patient = patient;\n      });\n      this.patientService.getAvatar(user.id).subscribe(avatar => {\n        this.avatar = 'data:image/jpeg;base64,' + avatar?.image?.data;\n      })\n    })\n  }\n\n  onSubmit(){\n    if (this.form.newPassword !== this.form.confirmPassword){\n      this.passwordMatch = false;\n      console.log(\"password does not match\");\n      return;\n    }\n    const password = new Password(this.form.oldPassword, this.form.newPassword);\n    this.patientService.updatePassword(this.patient.id, password).subscribe(message =>{\n      console.log(\"password success: \", JSON.stringify(message));\n      this.isPasswordSuccess = true;\n      this.successMessage = message.message;\n      setTimeout(() => this.successMessage = '', 2000);\n    }, err => {\n      this.isPasswordFailed = true;\n      console.log(\"password failed: \", JSON.stringify(err));\n      this.errorMessage = err.error.message;\n    });\n  }\n}","<div class=\"main-wrapper\">\n  <div class=\"breadcrumb-bar\">\n      <div class=\"container-fluid\">\n          <div class=\"row align-items-center\">\n              <div class=\"col-md-12 col-12\">\n                  <nav aria-label=\"breadcrumb\" class=\"page-breadcrumb\">\n                      <ol class=\"breadcrumb\">\n                          <li class=\"breadcrumb-item\"><a href=\"#\">Patient</a></li>\n                          <li class=\"breadcrumb-item active\" aria-current=\"page\">editPassword</li>\n                      </ol>\n                  </nav>\n                  <h2 class=\"breadcrumb-title\">Change Password</h2>\n              </div>\n          </div>\n      </div>\n  </div>\n  <div class=\"content\">\n      <div class=\"container-fluid\">\n          <div class=\"row\">\n\n              <!-- Profile Sidebar -->\n              <div class=\"col-md-5 col-lg-4 col-xl-3 theiaStickySidebar\">\n                  <app-patient-side-bar [avatar]=\"avatar\"></app-patient-side-bar>\n              </div>\n\n\n              <div class=\"col-md-7 col-lg-8 col-xl-9\">\n                  <div class=\"card\">\n                      <div class=\"card-body\">\n                          <div class=\"row\">\n                              <div class=\"col-md-12 col-lg-6\">\n                                  <form name=\"form\" (ngSubmit)=\"f.form.valid && onSubmit()\" #f=\"ngForm\" novalidate>\n                                      <input type=\"password\" class=\"form-control floating\" name=\"oldPassword\"\n                                          [(ngModel)]=\"form.oldPassword\" required minlength=\"8\" maxlength=\"20\"\n                                          #oldPassword=\"ngModel\">\n                                      <label class=\"focus-label\">Old Password</label>\n                                      <div class=\"alert-danger\" *ngIf=\"f.submitted && oldPassword.invalid\">\n                                          <div *ngIf=\"oldPassword.errors.required\">Password is required</div>\n                                          <div *ngIf=\"oldPassword.errors.minlength\">\n                                              Password must be at least 8 characters\n                                          </div>\n                                          <div *ngIf=\"oldPassword.errors.maxlength\">\n                                              Password must be at most 20 characters\n                                          </div>\n                                      </div>\n                                      <input type=\"password\" class=\"form-control floating\" name=\"newPassword\"\n                                          [(ngModel)]=\"form.newPassword\" required minlength=\"8\" maxlength=\"20\"\n                                          #newPassword=\"ngModel\">\n                                      <label class=\"focus-label\">New Password</label>\n                                      <div class=\"alert-danger\" *ngIf=\"f.submitted && newPassword.invalid\">\n                                          <div *ngIf=\"newPassword.errors.required\">Password is required</div>\n                                          <div *ngIf=\"newPassword.errors.minlength\">\n                                              Password must be at least 8 characters\n                                          </div>\n                                          <div *ngIf=\"newPassword.errors.maxlength\">\n                                              Password must be at most 20 characters\n                                          </div>\n                                      </div>\n                                      <input type=\"password\" class=\"form-control floating\" name=\"confirmPassword\"\n                                          [(ngModel)]=\"form.confirmPassword\" required minlength=\"8\" maxlength=\"20\"\n                                          #confirmPassword=\"ngModel\">\n                                      <label class=\"focus-label\">Confirm New Password</label>\n                                      <div class=\"alert-danger\" *ngIf=\"f.submitted && confirmPassword.invalid\">\n                                          <div *ngIf=\"confirmPassword.errors.required\">Password is required</div>\n                                          <div *ngIf=\"confirmPassword.errors.minlength\">\n                                              Password must be at least 8 characters\n                                          </div>\n                                          <div *ngIf=\"confirmPassword.errors.maxlength\">\n                                              Password must be at most 20 characters\n                                          </div>\n                                          \n                                      </div>\n                                      <div class=\"alert alert-danger\"  *ngIf=\"!passwordMatch\">\n                                          new Password and Confirm Password must match\n                                      </div>\n                                      <div class=\"alert alert-danger\" *ngIf=\"f.submitted && isPasswordFailed\">\n                                          Password failed!<br />{{ errorMessage }}\n                                      </div>\n                                      <div class=\"alert alert-success\" *ngIf=\"f.submitted && successMessage \">\n                                            <br/>\n                                            <b>Success</b>{{ successMessage }}\n                                        </div>\n                                      <div class=\"submit-section\">\n                                          <button type=\"submit\" class=\"btn btn-primary submit-btn\">Submit</button>\n                                      </div>\n                                  </form>\n                                  <!-- /Change Password Form -->\n\n                              </div>\n                          </div>\n                      </div>\n                  </div>\n              </div>\n          </div>\n      </div>\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../../../../services/auth.service'\nimport { TokenStorageService } from '../../../../services/token-storage.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { User } from 'src/app/models/User';\n\n\n@Component({\n  selector: 'app-patient-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  form: any = {};\n  isLoggedIn = false;\n  isLoginFailed = false;\n  errorMessage = '';\n  roles: string[] = [];\n  retUrl:string = \"patient/profile\";\n\n  constructor(\n    private authService: AuthService,\n    private tokenStorage: TokenStorageService,\n    private router:Router,\n    private activatedRoute:ActivatedRoute) { }\n\n  ngOnInit() {\n    if (this.tokenStorage.getToken()) {\n      this.isLoggedIn = true;\n      this.roles = this.tokenStorage.getUser().roles;\n    }\n    this.activatedRoute.queryParamMap\n                .subscribe(params => {\n            this.retUrl = params.get('retUrl'); \n            console.log( 'LoginComponent/ngOnInit '+ this.retUrl);\n        });\n  }\n\n  onSubmit() {\n    this.authService.patientLogin(this.form).subscribe(\n      (user:User) => {\n        this.tokenStorage.saveToken(user.accessToken);\n        this.tokenStorage.saveUser(user);\n        this.tokenStorage.saveUserType(user.userType);\n\n        this.isLoginFailed = false;\n        this.isLoggedIn = true;\n        this.roles = this.tokenStorage.getUser().roles;\n        this.authService.getLoggedInUser.emit(user);\n        console.log(\"login successful\");\n        console.log(this.tokenStorage.getUser());\n        console.log( 'return to '+ this.retUrl);\n           if (this.retUrl!=null) {\n                this.router.navigate( [this.retUrl]);\n           } else {\n                this.router.navigate( ['patient/appointments']);\n           }\n           \n        \n      },\n      err => {\n        this.errorMessage = err.error.message;\n        this.isLoginFailed = true;\n      }\n    );\n  }\n\n  \n}","<div class=\"content \">\n    <div class=\"container-fluid\">\n        <div class=\"row\">\n            <div class=\"col-md-8 offset-md-2\">\n\n                <!-- Login Tab Content -->\n                <div class=\"account-content\">\n                    <div class=\"row align-items-center justify-content-center\">\n                        <div class=\"col-md-7 col-lg-6 login-left\">\n                            <img src=\"assets/img/login-banner.png\" class=\"img-fluid\" alt=\"Doccure Login\">\n                        </div>\n                        <div class=\"col-md-12 col-lg-6 login-right\">\n                            <div class=\"login-header\">\n                                <h3>Login <span>AirDoc</span></h3>\n                            </div>\n                            <form *ngIf=\"!isLoggedIn\" name=\"form\" (ngSubmit)=\"f.form.valid && onSubmit()\" #f=\"ngForm\"\n                                novalidate>\n                                <div class=\"form-group\">\n                                    <div\n                                      class=\"alert alert-danger\"\n                                      role=\"alert\"\n                                      *ngIf=\"f.submitted && isLoginFailed\"\n                                    >\n                                      Login failed: {{ errorMessage }}\n                                    </div>\n                                  </div>\n                                <div class=\"form-group form-focus\">\n                                    <input class=\"form-control\" name=\"email\" [(ngModel)]=\"form.email\" required\n                                        #email=\"ngModel\" type=\"email\" class=\"form-control floating\">\n                                    <label class=\"focus-label\">Email</label>\n                                    \n                                    </div>\n                                    <div class=\"alert alert-danger\" role=\"alert\" *ngIf=\"f.submitted && email.invalid\"> Email is required!</div>\n                                    <div class=\"form-group form-focus\">\n                                        <input name=\"password\" [(ngModel)]=\"form.password\" required minlength=\"6\"\n                                            #password=\"ngModel\" type=\"password\" class=\"form-control floating\">\n                                        <label class=\"focus-label\">Password</label>\n                                        \n                                    </div>\n                                    <div class=\"alert alert-danger\" role=\"alert\"\n                                            *ngIf=\"f.submitted && password.invalid\">\n                                            <div *ngIf=\"password.errors.required\">Password is required</div>\n                                            <div *ngIf=\"password.errors.minlength\">\n                                                Password must be at least 6 characters\n                                            </div>\n                                        </div>\n                                    <div class=\"text-right\">\n                                        <a class=\"forgot-link\" routerLink=\"/doctor/forgot-password\">Forgot Password ?</a>\n                                    </div>\n                                    <button class=\"btn btn-primary btn-block btn-lg login-btn\"\n                                        type=\"submit\">Login</button>\n                                    <div class=\"text-center dont-have\">Don’t have an account? <a\n                                            routerLink=\"/patient/signup\">Register</a></div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n                <!-- /Login Tab Content -->\n\n            </div>\n        </div>\n\n    </div>\n\n</div>\n<!-- /Page Content -->","import { Component, OnInit, Input } from '@angular/core';\nimport { Doctor } from 'src/app/models/Doctor';\nimport { Appointment } from 'src/app/models/Appointment';\nimport { DoctorService } from 'src/app/services/doctor.service';\n\n@Component({\n  selector: 'app-patient-appointment',\n  templateUrl: './patient-appointment.component.html',\n  styleUrls: ['./patient-appointment.component.css']\n})\nexport class PatientAppointmentComponent implements OnInit {\n\n  @Input() appointment:Appointment;\n  doctor:Doctor;\n  doctorAvatar:any;\n  appointmentDate:Date;\n  bookingDate:Date;\n\n  constructor(private doctorSerivce:DoctorService) { }\n\n  ngOnInit(): void {\n    this.appointmentDate = new Date(this.appointment.appointmentDate);\n    this.bookingDate = new Date(this.appointment.bookingDate);\n    this.doctorSerivce.getById(this.appointment.doctorId).subscribe(doc => {\n      this.doctor = doc;\n    });\n    this.doctorSerivce.getAvatar(this.appointment.doctorId).subscribe(avatar => {\n      this.doctorAvatar = avatar;\n    })\n  }\n\n}\n","<li class=\"list-group-item\">\n    <div class=\"row\">\n        <div class=\"col-sm\">\n            <div class=\"avatar\">\n                <img class=\"avatar-img rounded-circle\" alt=\"Doctor Image\" [src]=\"doctorAvatar\">\n            </div>\n            <h6>Dr {{doctor.firstname | titlecase }} {{doctor.lastname | titlecase}}</h6>\n        </div>\n        <div class=\"col-sm\">{{appointment.description | slice:0:30}}</div>\n        <div class=\"col-sm\">{{appointmentDate | date:'medium'}}</div>\n        <div class=\"col-sm\">{{bookingDate | date:'medium'}}</div>\n        <div *ngIf=\"appointment.state == 'ACCEPTED'\" class=\"col-sm\"><span class=\"badge badge-pill bg-success-light\">{{appointment.state | titlecase}}</span></div>\n        <div *ngIf=\"appointment.state == 'CANCELED'\" class=\"col-sm\"><span class=\"badge badge-pill bg-danger-light\">{{appointment.state | titlecase}}</span></div>\n    </div>\n</li>","import { Component, OnInit } from '@angular/core';\nimport { Appointment } from 'src/app/models/Appointment';\nimport { AppointmentService } from 'src/app/services/appointment.service';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { Patient } from 'src/app/models/Patient';\nimport { PatientService } from 'src/app/services/patient.service';\n\n@Component({\n  selector: 'app-patient-appointments',\n  templateUrl: './patient-appointments.component.html',\n  styleUrls: ['./patient-appointments.component.css']\n})\nexport class PatientAppointmentsComponent implements OnInit {\n\n  avatar:any;\n  appointments:Appointment[]\n  patient:Patient;\n  constructor(\n    private appointmentService:AppointmentService,\n    private authService:AuthService,\n    private patientService:PatientService) { }\n\n  ngOnInit(): void {\n    this.authService.getCurrentUser().subscribe(user => {\n      this.patientService.getById(user.id).subscribe(patient =>{\n        this.patient = patient;\n      });\n      this.patientService.getAvatar(user.id).subscribe(avatar => {\n        this.avatar = 'data:image/jpeg;base64,' + avatar?.image?.data;\n      });\n      this.appointmentService.getAllPatientAppoitments(user.id).subscribe(apps =>{\n        this.appointments = apps;\n        console.log(\"appointments: \", JSON.stringify(apps));\n      });\n    })\n  }\n\n}\n","<!-- Breadcrumb -->\n<div class=\"breadcrumb-bar\">\n    <div class=\"container-fluid\">\n        <div class=\"row align-items-center\">\n            <div class=\"col-md-12 col-12\">\n                <nav aria-label=\"breadcrumb\" class=\"page-breadcrumb\">\n                    <ol class=\"breadcrumb\">\n                        <li class=\"breadcrumb-item\"><a href=\"index-2.html\">Home</a></li>\n                        <li class=\"breadcrumb-item active\" aria-current=\"page\">Dashboard</li>\n                    </ol>\n                </nav>\n                <h2 class=\"breadcrumb-title\">Dashboard</h2>\n            </div>\n        </div>\n    </div>\n</div>\n<!-- /Breadcrumb -->\n\n<!-- Page Content -->\n<div class=\"content\">\n    <div class=\"container-fluid\">\n\n        <div class=\"row\">\n            <!-- Profile-SideBar -->\n            <div class=\"col-md-5 col-lg-4 col-xl-3 theiaStickySidebar\">\n                <app-patient-side-bar [avatar]=\"avatar\"></app-patient-side-bar>\n            </div>\n\n            <!-- Profile-SideBar -->\n            <div class=\"col-md-7 col-lg-8 col-xl-9\">\n                <ul class=\"list-group\">\n                    <li class=\"list-group-item\">\n                        <div class=\"row\">\n                            <div class=\"col-sm\">\n                                Doctor\n                            </div>\n                            <div class=\"col-sm\">\n                                Description\n                            </div>\n                            <div class=\"col-sm\">\n                                Appointment Date\n                            </div>\n                            <div class=\"col-sm\">\n                                Booking Date\n                            </div>\n                            <div class=\"col-sm\">\n                                State\n                            </div>\n                            \n                            \n                        </div>\n                    </li>\n                    <app-patient-appointment *ngFor=\"let appointment of appointments\" [appointment]=\"appointment\">\n                    </app-patient-appointment>\n                    <li *ngIf=\"appointments.length === 0\" class=\"list-group-item\">\n                        <h6>You Have No appointments</h6>\n                    </li>\n                </ul>\n            </div>\n        </div>\n\n    </div>\n\n</div>\n<!-- /Page Content -->","import { Component, OnInit, Input } from '@angular/core';\nimport { Patient } from 'src/app/models/Patient';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { PatientService } from 'src/app/services/patient.service';\n\n\n@Component({\n  selector: 'app-patient-side-bar',\n  templateUrl: './patient-side-bar.component.html',\n  styleUrls: ['./patient-side-bar.component.css']\n})\nexport class PatientSideBarComponent implements OnInit {\n\n  @Input() avatar:any;\n  patient:Patient;\n  constructor(\n    private authService:AuthService,\n    private patientService:PatientService ) { }\n\n  ngOnInit(): void {\n    this.authService.getCurrentUser().subscribe(user => {\n      this.patientService.getById(user.id).subscribe(patient => {\n        this.patient = patient;\n      });\n    })\n    \n  }\n\n}\n","<!-- Profile Sidebar -->\n<div class=\"profile-sidebar\">\n    <div class=\"widget-profile pro-widget-content\">\n        <div class=\"profile-info-widget\">\n            <a href=\"#\" class=\"booking-doc-img\">\n                <!-- <img [src]=\"avatar\" alt=\"Patient Image\"> -->\n                <img *ngIf=\"avatar.length > 100\" [src]=\"avatar\" alt=\"Patient Image\">\n                <img *ngIf=\"avatar.length < 100\" src=\"assets/img/patients/default-patient.jpeg\"  alt=\"Patient Image\">\n            </a>\n            <div class=\"profile-det-info\">\n                <h3>{{patient?.firstname | titlecase }} {{patient?.lastname | titlecase }}</h3>\n                <div class=\"patient-details\">\n                    <!-- <h5><i class=\"fas fa-birthday-cake\"></i> 24 Jul 1983, 38 years</h5> -->\n                    <!-- <h5 class=\"mb-0\"><i class=\"fas fa-map-marker-alt\"></i> Newyork, USA</h5> -->\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"dashboard-widget\">\n        <nav class=\"dashboard-menu\">\n            <ul>\n                <li routerLinkActive=\"active\">\n                    <a routerLink=\"/patient/appointments\">\n                        <i class=\"fas fa-bookmark\"></i>\n                        <span>Appointments</span>\n                    </a>\n                </li>\n                <li routerLinkActive=\"active\" >\n                    <a routerLink=\"/patient/profile\">\n                        <i class=\"fas fa-user-cog\"></i>\n                        <span>Profile Settings</span>\n                    </a>\n                </li>\n                <li routerLinkActive=\"active\">\n                    <a routerLink=\"/patient/change-password\">\n                        <i class=\"fas fa-lock\"></i>\n                        <span>Change Password</span>\n                    </a>\n                </li>\n            </ul>\n        </nav>\n    </div>\n\n</div>\n\n<!-- / Profile Sidebar -->","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { PatientService } from 'src/app/services/patient.service';\nimport { Patient } from 'src/app/models/Patient';\nimport { HttpResponse, HttpEventType } from '@angular/common/http';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\nexport class ProfileComponent implements OnInit {\n\n  patient:Patient;\n  avatar:any;\n  birthday:string;\n  currentSelectedAvatar:any;\n  uploadProgress:number;\n  uploadErrorMessage:string;\n  constructor(\n    private authService:AuthService,\n    private patientService:PatientService\n  ) { }\n\n  ngOnInit(): void {\n    this.authService.getCurrentUser().subscribe(user => {\n      this.patientService.getById(user.id).subscribe(patient => {\n        this.patient = patient;\n        // const isoBirthday = new Date(patient.birthday);\n        // this.birthday = isoBirthday.toISOString().substr(0, 10);;\n        console.log(\"birthday : \", this.patient.birthday); \n      });\n      this.patientService.getAvatar(user.id).subscribe(avatar => {\n        this.avatar = 'data:image/jpeg;base64,' + avatar?.image?.data;\n      });\n    })\n  }\n\n\n  onSubmit(){\n    console.log(\"patient new name: \", JSON.stringify(this.patient));\n    // const birthday = new Date(this.birthday)\n    // this.patient.birthday = birthday.toISOString();\n    this.patientService.updatePatient(this.patient).subscribe(patient => {\n       this.patient = patient;\n       window.location.reload();\n    });\n  }\n\n\n  uploadAvatar(event){\n    console.log(\"upload started\");\n    this.currentSelectedAvatar = event.target.files.item(0);\n    this.patientService.uploadAvatar(this.patient.id,this.currentSelectedAvatar ).subscribe(\n      event => {\n        if (event.type === HttpEventType.UploadProgress) {\n          this.uploadProgress = Math.round(100 * event.loaded / event.total);\n        } else if (event instanceof HttpResponse) {\n          this.patientService.getAvatar(this.patient.id).subscribe(avatar => {\n            this.avatar = 'data:image/jpeg;base64,' + avatar.image.data\n            this.uploadProgress = 0;\n            this.currentSelectedAvatar = undefined;\n          });\n        }\n      },\n      err => {\n        this.uploadProgress = 0;\n        this.uploadErrorMessage = 'Could not upload the Photo!';\n        this.currentSelectedAvatar = undefined;\n      });\n  }\n}\n","<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>AirDoc</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=0\">\n</head>\n<body>\n<div class=\"main-wrapper\">\n  <div class=\"breadcrumb-bar\">\n    <div class=\"container-fluid\">\n      <div class=\"row align-items-center\">\n        <div class=\"col-md-12 col-12\">\n          <nav aria-label=\"breadcrumb\" class=\"page-breadcrumb\">\n            <ol class=\"breadcrumb\">\n              <li class=\"breadcrumb-item\"><a href=\"#\">Patient</a></li>\n              <li class=\"breadcrumb-item active\" aria-current=\"page\">Profile Settings</li>\n            </ol>\n          </nav>\n          <h2 class=\"breadcrumb-title\">Profile Settings</h2>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"content\">\n    <div class=\"container-fluid\">\n      <div class=\"row\">\n\n        <div class=\"col-md-5 col-lg-4 col-xl-3 theiaStickySidebar\">\n          <app-patient-side-bar [avatar]=\"avatar\"></app-patient-side-bar>\n        </div>\n        <div class=\"col-md-7 col-lg-8 col-xl-9\">\n          <div class=\"card\">\n            <div *ngIf=\"!!patient\" class=\"card-body\">\n\n              <!-- Profile Settings Form -->\n              <form (ngSubmit)=\"onSubmit()\">\n                <div class=\"row form-row\">\n                  <div class=\"col-12 col-md-12\">\n                    <div class=\"form-group\">\n                      <div class=\"change-avatar\">\n                        <div class=\"profile-img\">\n                            <!-- <img [src]=\"avatar\" alt=\"Patient Image\"> -->\n                            <img *ngIf=\"avatar.length > 100\" [src]=\"avatar\" alt=\"Patient Image\">\n                            <img *ngIf=\"avatar.length < 100\" src=\"assets/img/patients/default-patient.jpeg\"  alt=\"Doctor Image\">\n                                      \n                        </div>\n                        <div class=\"upload-img\">\n                            <div *ngIf=\"currentSelectedAvatar\" class=\"progress\">\n                                <div class=\"progress-bar progress-bar-info progress-bar-striped\"\n                                    role=\"progressbar\" attr.aria-valuenow=\"{{ uploadProgress }}\"\n                                    aria-valuemin=\"0\" aria-valuemax=\"100\"\n                                    [ngStyle]=\"{ width: uploadProgress + '%' }\">\n                                    {{ uploadProgress }}%\n                                </div>\n                            </div>\n                            <div class=\"change-photo-btn\">\n                                <span><i class=\"fa fa-upload\"></i> Upload Photo</span>\n                                <input type=\"file\" class=\"upload\" (change)=\"uploadAvatar($event)\">\n                            </div>\n                            <small class=\"form-text text-muted\">Allowed JPG, GIF or PNG. Max size of\n                                2MB</small>\n                        </div>\n                    </div>\n                    </div>\n                  </div>\n                  <div class=\"col-12 col-md-6\">\n                    <div class=\"form-group\">\n                      <label>First Name</label>\n                      <input [value]=\"patient.firstname\" [(ngModel)]=\"patient.firstname\" name=\"firstname\" type=\"text\" class=\"form-control\" >\n                    </div>\n                  </div>\n                  <div class=\"col-12 col-md-6\">\n                    <div class=\"form-group\">\n                      <label>Last Name</label>\n                      <input [value]=\"patient.lastname\" [(ngModel)]=\"patient.lastname\" name=\"lastname\" type=\"text\" class=\"form-control\" >\n                    </div>\n                  </div>\n                  <div class=\"col-12 col-md-6\">\n                    <div class=\"form-group\">\n                      <label>Date of Birth</label>\n                        <input [(ngModel)]=\"patient.birthday\" name=\"birthday\" type=\"date\" class=\"form-control \">\n                    </div>\n                  </div>\n                  <div class=\"col-12 col-md-6\">\n                    <div class=\"form-group\">\n                      <label>Blood Group</label>\n                      <select [value]=\"patient?.bloodGroup\" [(ngModel)]=\"patient.bloodGroup\" name=\"bloodGroup\" class=\"form-control select\">\n                        <option>A-</option>\n                        <option>A+</option>\n                        <option>B-</option>\n                        <option>B+</option>\n                        <option>AB-</option>\n                        <option>AB+</option>\n                        <option>O-</option>\n                        <option>O+</option>\n                      </select>\n                    </div>\n                  </div>\n                  <div class=\"col-12 col-md-6\">\n                    <div class=\"form-group\">\n                      <label>Email ID</label>\n                      <input [value]=\"patient.email\" [(ngModel)]=\"patient.email\" name=\"email\" type=\"email\" class=\"form-control\" readonly>\n                    </div>\n                  </div>\n                  <div class=\"col-12 col-md-6\">\n                    <div class=\"form-group\">\n                      <label>Mobile</label>\n                      <input [value]=\"patient.phone\" [(ngModel)]=\"patient.phone\"  name=\"phone\" type=\"text\"class=\"form-control\">\n                    </div>\n                  </div>\n                  <div class=\"col-12\">\n                    <div class=\"form-group\">\n                      <label>Address</label>\n                      <input [value]=\"patient.address\" [(ngModel)]=\"patient.address\" name=\"address\" type=\"text\" class=\"form-control\" >\n                    </div>\n                  </div>\n                  <div class=\"col-12 col-md-6\">\n                    <div class=\"form-group\">\n                      <label>City</label>\n                      <input [value]=\"patient.city\" [(ngModel)]=\"patient.city\" name=\"city\" type=\"text\" class=\"form-control\" >\n                    </div>\n                  </div>\n                  <div class=\"col-12 col-md-6\">\n                    <div class=\"form-group\">\n                      <label>Zip Code</label>\n                      <input [value]=\"patient.zipCode\" [(ngModel)]=\"patient.zipCode\" name=\"zipCode\" type=\"text\" class=\"form-control\">\n                    </div>\n                  </div>\n                  <div class=\"col-12 col-md-6\">\n                    <div class=\"form-group\">\n                      <label>Country</label>\n                      <input [value]=\"patient.country\" [(ngModel)]=\"patient.country\" name=\"country\" type=\"text\" class=\"form-control\">\n                    </div>\n                  </div>\n                </div>\n                <div class=\"submit-section\">\n                  <button type=\"submit\" class=\"btn btn-primary submit-btn\">Save</button>\n                </div>\n              </form>\n              <!-- /Profile Settings Form -->\n\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n  </div>\n  <!-- /Page Content -->\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-patient-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.css']\n})\nexport class SignupComponent implements OnInit {\n\n  form: any = {};\n  isSuccessful = false;\n  isSignUpFailed = false;\n  errorMessage = '';\n\n  constructor(private router:Router, private authService: AuthService) { }\n\n  ngOnInit() {\n  }\n\n  onSubmit() {\n    this.authService.patientRegister(this.form).subscribe(\n      data => {\n        console.log(data);\n        this.isSuccessful = true;\n        this.isSignUpFailed = false;\n        this.router.navigate([\"patient/login\"]);\n        \n      },\n      err => {\n        this.errorMessage = err.error.message;\n        this.isSignUpFailed = true;\n      }\n    );\n  }\n}\n","<div class=\"content\">\n    <div class=\"container-fluid\">\n        <div class=\"row\">\n            <div class=\"col-md-8 offset-md-2\">\n\n                <!-- Account Content -->\n                <div class=\"account-content\">\n                    <div class=\"row align-items-center justify-content-center\">\n                        <div class=\"col-md-7 col-lg-6 login-left\">\n                            <img src=\"assets/img/login-banner.png\" class=\"img-fluid\" alt=\"Login Banner\">\n                        </div>\n                        <div class=\"col-md-12 col-lg-6 login-right\">\n                            <div class=\"login-header\">\n                                <h3>Patient Register <a routerLink=\"/doctor/signup\">Not a Patient?</a></h3>\n                            </div>\n\n                            <!-- Register Form -->\n                            <form *ngIf=\"!isSuccessful\" name=\"form\" (ngSubmit)=\"f.form.valid && onSubmit()\" #f=\"ngForm\"\n                                novalidate>\n                                \n                                <div class=\"form-group form-focus\">\n                                    <input type=\"text\" class=\"form-control floating\" name=\"firstname\"\n                                        [(ngModel)]=\"form.firstname\" required minlength=\"3\" maxlength=\"20\"\n                                        #firstname=\"ngModel\">\n                                    <label class=\"focus-label\">First Name</label>\n                                    <div class=\"alert-danger\" *ngIf=\"f.submitted && firstname.invalid\">\n                                        <div *ngIf=\"firstname.errors.required\">First Name is required</div>\n                                        <div *ngIf=\"firstname.errors.minlength\">\n                                            First Name must be at least 3 characters\n                                        </div>\n                                        <div *ngIf=\"firstname.errors.maxlength\">\n                                            First Name must be at most 20 characters\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"form-group form-focus\">\n                                    <input type=\"text\" class=\"form-control floating\" name=\"lastname\"\n                                        [(ngModel)]=\"form.lastname\" required minlength=\"3\" maxlength=\"20\"\n                                        #lastname=\"ngModel\">\n                                    <label class=\"focus-label\">Last Name</label>\n                                    <div class=\"alert-danger\" *ngIf=\"f.submitted && lastname.invalid\">\n                                        <div *ngIf=\"lastname.errors.required\">Last Name is required</div>\n                                        <div *ngIf=\"lastname.errors.minlength\">\n                                            Last Name must be at least 3 characters\n                                        </div>\n                                        <div *ngIf=\"username.errors.maxlength\">\n                                            Last Name must be at most 20 characters\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"form-group form-focus\">\n                                    <input type=\"text\" class=\"form-control floating\" name=\"username\"\n                                        [(ngModel)]=\"form.username\" required minlength=\"3\" maxlength=\"20\"\n                                        #username=\"ngModel\">\n                                    <label class=\"focus-label\">Username</label>\n                                    <div class=\"alert-danger\" *ngIf=\"f.submitted && username.invalid\">\n                                        <div *ngIf=\"username.errors.required\">Username is required</div>\n                                        <div *ngIf=\"username.errors.minlength\">\n                                            Username must be at least 3 characters\n                                        </div>\n                                        <div *ngIf=\"username.errors.maxlength\">\n                                            Username must be at most 20 characters\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"form-group form-focus\">\n                                    <input type=\"tel\" class=\"form-control floating\" name=\"phone\"\n                                    [(ngModel)]=\"form.phone\" required minlength=\"8\" maxlength=\"20\"\n                                    #phone=\"ngModel\">\n                                    <label class=\"focus-label\">Phone Number</label>\n                                    <div class=\"alert-danger\" *ngIf=\"f.submitted && phone.invalid\">\n                                        <div *ngIf=\"phone.errors.required\">Phone Number is required</div>\n                                        <div *ngIf=\"phone.errors.minlength\">\n                                            Phone Number must be at least 8 characters\n                                        </div>\n                                        <div *ngIf=\"phone.errors.maxlength\">\n                                            Phone Number must be at most 20 characters\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"form-group form-focus\">\n                                    <input type=\"email\" class=\"form-control floating\" name=\"email\"\n                                        [(ngModel)]=\"form.email\" required minlength=\"10\" maxlength=\"50\"\n                                        #email=\"ngModel\">\n                                    <label class=\"focus-label\">Email</label>\n                                    <div class=\"alert-danger\" *ngIf=\"f.submitted && email.invalid\">\n                                        <div *ngIf=\"email.errors.required\">Email is required</div>\n                                        <div *ngIf=\"email.errors.minlength\">\n                                            Email must be at least 10 characters\n                                        </div>\n                                        <div *ngIf=\"email.errors.maxlength\">\n                                            Email must be at most 50 characters\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"form-group form-focus\">\n                                    <input type=\"password\" class=\"form-control floating\" name=\"password\"\n                                    [(ngModel)]=\"form.password\" required minlength=\"8\" maxlength=\"20\"\n                                    #password=\"ngModel\">\n                                    <label class=\"focus-label\">Create Password</label>\n                                    <div class=\"alert-danger\" *ngIf=\"f.submitted && password.invalid\">\n                                        <div *ngIf=\"password.errors.required\">Password is required</div>\n                                        <div *ngIf=\"password.errors.minlength\">\n                                            Password must be at least 8 characters\n                                        </div>\n                                        <div *ngIf=\"phone.errors.maxlength\">\n                                            Password must be at most 20 characters\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"text-right\">\n                                    <a class=\"forgot-link\" routerLink=\"patient/login\">Already have an account?</a>\n                                </div>\n                                <button class=\"btn btn-primary btn-block btn-lg login-btn\" type=\"submit\">Signup</button>\n                                <div class=\"alert alert-warning\" *ngIf=\"f.submitted && isSignUpFailed\">\n                                    Signup failed!<br />{{ errorMessage }}\n                                </div>\n                            </form>\n                            <div class=\"alert alert-success\" *ngIf=\"isSuccessful\">\n                                Your registration is successful!\n                              </div>\n                            <!-- /Register Form -->\n\n                        </div>\n                    </div>\n                </div>\n                <!-- /Account Content -->\n\n            </div>\n        </div>\n\n    </div>\n\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Doctor } from 'src/app/models/Doctor';\nimport { Review } from 'src/app/models/Review';\nimport { DoctorService } from 'src/app/services/doctor.service';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-search',\n  templateUrl: './search.component.html',\n  styleUrls: ['./search.component.css']\n})\nexport class SearchComponent implements OnInit {\n\n  doctors: Array<Doctor> = [];\n  searchCity:string = \"\";\n  searchQuery:string = \"\";\n\n  constructor(\n    private doctorService: DoctorService,\n    private activatedRoute:ActivatedRoute) { }\n\n  ngOnInit(): void {\n    this.activatedRoute.queryParamMap\n                .subscribe(params => {\n            this.searchCity = params.get('city');\n            this.searchQuery = params.get('query');\n            this.search(this.searchCity, this.searchQuery);\n        });\n    // this.doctorService.getDoctors().subscribe((doctors) => {\n    //     console.log(doctors);\n    //     this.doctors = doctors;\n    //   });\n\n    \n\n  }\n\n  search(location:string, query:string){\n    console.log(\"searchCom\", \"location: \" + location, \"query: \" +query);\n    this.doctorService\n    .search(location, query)\n    .subscribe(doctors => this.doctors = doctors);\n  }\n\n}\n","<!-- Breadcrumb -->\n<div class=\"breadcrumb-bar\">\n    <div class=\"container-fluid\">\n        <div class=\"row align-items-center\">\n            <div class=\"col-md-8 col-12\">\n                <nav aria-label=\"breadcrumb\" class=\"page-breadcrumb\">\n                    <ol class=\"breadcrumb\">\n                        <li class=\"breadcrumb-item\"><a routerLink=\"/home\">Home</a></li>\n                        <li class=\"breadcrumb-item active\" aria-current=\"page\">Search</li>\n                    </ol>\n                </nav>\n                <h2 class=\"breadcrumb-title\">{{doctors.length}} matches found for : {{searchQuery}} In {{searchCity}}</h2>\n            </div>\n        </div>\n    </div>\n</div>\n<!-- /Breadcrumb -->\n<!-- Search -->\n<div class=\"row mt-3 d-flex justify-content-center\">\n    <div class=\"search-box\">\n        <form>\n            <div class=\"form-group search-location\">\n                <input #city type=\"text\" class=\"form-control\" placeholder=\"Search City\">\n            </div>\n            <div class=\"form-group search-info\">\n                <input #query type=\"text\" class=\"form-control\" placeholder=\"Search Doctors, Clinics, Hospitals, Diseases Etc\">\n            </div>\n            <div class=\"btn-search\">\n                <button (click)=\"search(city.value, query.value)\" type=\"button\" class=\"btn btn-block\">Search</button>\n            </div>\t\n            \n        </form>\n    </div>\n    </div>\n    <!-- Search end -->\n\n<!-- Page Content -->\n<div class=\"content\">\n    <div class=\"container-fluid\">\n\n        <div class=\"row\">\n            <div class=\"col-md-12 col-lg-8 col-xl-9 m-auto\">\n                <app-doctor *ngFor=\"let doctor of doctors\" [doctor]=\"doctor\"></app-doctor>\t\n            </div>\n        </div>\n\n    </div>\n\n</div>\t\n\n\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-patient',\n  templateUrl: './patient.component.html',\n  styleUrls: ['./patient.component.css']\n})\nexport class PatientComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>patient works!</p>\n","import { Component, OnInit, Output, Input, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'app-rating-star',\n  templateUrl: './rating-star.component.html',\n  styleUrls: ['./rating-star.component.css']\n})\nexport class RatingStarComponent implements OnInit {\n\n  // @Input() max: number;\n  @Output() onRating = new EventEmitter<number>();\n  @Input() readonly:boolean = true;\n  @Input() ratedCount:number;\n \n  max:number = 5;\n  maxItem : any[];\n \n constructor(){\n     this.ratedCount = 0;\n }\n \n ngOnInit(){\n     this.maxItem = [];\n     for(var i=0;i<this.max;i++){\n         this.maxItem.push(i+1);\n     }\n }\n setClass(s:number){\n  if(this.readonly){\n    return {\n      \"fa fa-star\":true,\n      \"ratingIcon\":true,\n      \"ratingHover\":false,\n      \"filled\": s <= this.ratedCount,\n     }\n   }\n   return {\n    \"fa fa-star\":true,\n    \"ratingIcon\":true,\n    \"ratingHover\":true,\n    \"filled\": s <= this.ratedCount,\n   }\n\n }\n setHover(){\n   if(this.readonly){\n    return {\n      \"ratingIcon\": true,\n      \"ratingHover\":false,\n     }\n   }\n   return {\n    \"ratingIcon\":true,\n    \"ratingHover\":true,\n   }\n}\n toggleRating(s:number){\n   if (this.readonly){\n     return;\n   }\n      this.ratedCount = s;\n      this.onRating.emit(this.ratedCount);\n }\n\n}\n","<i [ngClass]=\"setClass(s)\" \naria-hidden=\"true\" (click)=\"toggleRating(s)\"\n*ngFor = \"let s of maxItem\"></i>\n\n<!-- <div class=\"rating\">\n    <span [ngClass]=\"setHover()\" *ngFor = \"let s of maxItem\">\n       <i [ngClass]=\"setClass(s)\" \n          aria-hidden=\"true\" (click)=\"toggleRating(s)\"></i>\n    </span>\n</div> -->\n\n","import { Component, OnInit, Output , EventEmitter} from '@angular/core';\nimport { Review } from 'src/app/models/Review';\nimport { TokenStorageService } from 'src/app/services/token-storage.service';\nimport { AuthService } from 'src/app/services/auth.service';\n\n@Component({\n  selector: 'app-review-form',\n  templateUrl: './review-form.component.html',\n  styleUrls: ['./review-form.component.css']\n})\nexport class ReviewFormComponent implements OnInit {\n\n  @Output() addReview:EventEmitter<Review> = new EventEmitter()\n\n  rating:number=1;\n  content:string;\n  authorId:string;\n  constructor(private authService:AuthService) { }\n\n  ngOnInit(): void {\n     this.authService.getCurrentUser().subscribe(res => {\n      this.authorId = res.id;\n      console.log(\"::::::::: authorId: \", this.authorId);\n    });\n    \n  }\n\n  onRating(rating){\n    //TODO check rating max and min\n    console.log(\"rating: \", rating);\n    this.rating = rating;\n  }\n\n  onSubmit(){\n    console.log(\"authorId befor submit: \", this.authorId);\n    let review = new Review(this.content, [], this.rating, this.authorId);\n    console.log(\"review : \", JSON.stringify(review));\n    this.addReview.emit(review);\n    this.content = \"\";\n    this.rating = 0;\n  }\n}\n","<form (ngSubmit)=\"onSubmit()\">\n    <div class=\"form-group\">\n        <label>Review</label> <br>\n        <app-rating-star (onRating)=\"onRating($event)\" [readonly]=\"false\"></app-rating-star>\n    </div>\n    <div class=\"form-group\">\n        <label>Your review</label>\n        <textarea id=\"review_desc\" maxlength=\"100\" \n        class=\"form-control\" name=\"content\" [(ngModel)]=\"content\"></textarea>\n      \n      <div class=\"d-flex justify-content-between mt-3\"><small class=\"text-muted\"><span id=\"chars\">100</span> characters remaining</small></div>\n    </div>\n    <hr>\n    <div class=\"submit-section\">\n        <button type=\"submit\" class=\"btn btn-primary submit-btn\">Add Review</button>\n    </div>\n</form>","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { Review } from 'src/app/models/Review';\nimport { Patient } from 'src/app/models/Patient';\nimport { PatientService } from 'src/app/services/patient.service';\nimport { Like } from 'src/app/models/Like';\nimport { ReviewService } from 'src/app/services/review.service';\nimport { TokenStorageService } from 'src/app/services/token-storage.service';\nimport { AuthService } from 'src/app/services/auth.service';\n\n@Component({\n  selector: 'app-review',\n  templateUrl: './review.component.html',\n  styleUrls: ['./review.component.css']\n})\nexport class ReviewComponent implements OnInit {\n\n  currentUserId:string;\n  author:Patient;\n  avatar:any;\n  like:Like;\n  isLiked:boolean;\n  @Input() review:Review;\n  @Output() deleteReview:EventEmitter<Review> = new EventEmitter();\n  @Output() editReview:EventEmitter<Review> = new EventEmitter();\n  //@Output() toggleLike:EventEmitter<Like> = new EventEmitter();\n  constructor(\n    private patientService:PatientService, \n    private reviewService:ReviewService,\n    private autheService:AuthService) { }\n\n  ngOnInit(): void {\n    //TODO get author\n    \n    this.patientService.getById(this.review.patientId).subscribe(res => {\n      this.author = res;\n    });\n    this.patientService.getAvatar(this.review.patientId).subscribe(res=> {\n        this.avatar = 'data:image/jpeg;base64,' + res?.image?.data;\n        console.log(\"Avatar: \", this.avatar);\n    });\n    this.autheService.getCurrentUser().subscribe(res => {\n      this.currentUserId = res.id;\n      this.like = new Like(this.currentUserId);\n      this.setLiked(this.like);\n    })\n    \n\n  }\n\n  setLiked(like:Like){\n    this.isLiked = this.review.likes.includes(like);\n    console.log(\"isLiked: \" + this.isLiked);\n  }\n  getLiked():boolean{\n    return this.review.likes.includes(this.like);\n  }\n\n  toggleLike(){\n   \n    if(!this.isLiked){\n      console.log(\"liking\")\n      this.reviewService.likeReview(\n        this.review.id, this.like).subscribe(res => {\n          console.log(\"liking: \", JSON.stringify(res));\n          this.review.likes.push(this.like);\n          this.isLiked = true;\n        });\n    }\n    if(this.isLiked){\n      console.log(\"unliking\")\n      this.reviewService.unlikeReview(\n        this.review.id, this.like).subscribe(res => {\n          console.log(\"unliking: \", JSON.stringify(res));\n          let likes = this.review.likes;\n          console.log(\"befor delete \", JSON.stringify(likes));\n          const index = likes.indexOf(this.like, 0);\n          if (index > -1) {\n             likes.splice(index, 1);\n          }\n          console.log(\"after delete \", JSON.stringify(likes));\n          this.review.likes = likes;\n          this.isLiked = false;\n        });\n    }\n  }\n\n  onEdit(){\n    this.editReview.emit(this.review);\n  }\n\n  onDelete(){\n    this.deleteReview.emit(this.review);\n  }\n\n  setClass(){\n    return {\n      \"liked\":this.isLiked,\n      \"fa\": true,\n      \"fa-thumbs-up\": true\n    }\n  }\n  \n}\n","<li>\n    <div class=\"comment\">\n        <img class=\"avatar avatar-sm rounded-circle\" alt=\"Patient Image\" [src]=\"avatar\">\n        <div class=\"comment-body\">\n            <div class=\"meta-data\">\n                <span *ngIf=\"author\" class=\"comment-author\">{{author.firstname | titlecase}} {{author.lastname | titlecase}}</span>\n                <app-rating-star [ratedCount]=\"review?.rating\" [readonly]=\"true\"></app-rating-star>\n            </div>\n            <p class=\"comment-content\">\n                {{review?.content}}\n            </p>\n            <div class=\"comment-reply\">\n                <p class=\"recommend-btn\">\n                    <a (click)=\"toggleLike()\" class=\"like-btn\">\n                        <i [ngClass]=\"setClass()\"></i> ({{review?.likes?.length}})\n                    </a>\n                    <!-- <a *ngIf=\"author && currentUserId && author.id == currentUserId\" (click)=\"onEdit()\" class=\"edit-btn\">\n                        <i class=\"fa fa-edit\"></i>\n                    </a> -->\n                    <a *ngIf=\"author && currentUserId && author.id == currentUserId\" (click)=\"onDelete()\" class=\"trash-btn\">\n                        <i class=\"fa fa-trash\"></i>\n                    </a>\n                </p>\n            </div>\n        </div>\n    </div>\n<br>\n</li>\n","import { Component, OnInit, Input, Output, EventEmitter} from '@angular/core';\nimport { Doctor } from 'src/app/models/Doctor';\nimport { ReviewService } from 'src/app/services/review.service';\nimport { Review } from 'src/app/models/Review';\n\n@Component({\n  selector: 'app-reviews',\n  templateUrl: './reviews.component.html',\n  styleUrls: ['./reviews.component.css']\n})\nexport class ReviewsComponent implements OnInit {\n\n  @Input() doctor:Doctor;\n  @Input() isPatient:boolean;\n  @Output() refresh:EventEmitter<any> = new EventEmitter()\n  reviews:Review[]\n  rating:number;\n  constructor(private reviewService:ReviewService) { }\n\n  ngOnInit(): void {\n    this.refreshReviews();\n  }\n\n\n  addReview(review:Review){\n    console.log('review : ' + JSON.stringify(review))\n    this.reviewService.addReview(this.doctor.id, review).subscribe(res => {\n      console.log(\"doctor reviews : \", JSON.stringify(res))\n      this.refreshReviews()\n    });\n  }\n\n  deleteReview(review:Review){\n    this.reviewService.deleteReview(this.doctor.id, review.id).subscribe(res => {\n      console.log(\"doctor reviews : \", JSON.stringify(res))\n      // const index = this.reviews.indexOf(review, 0);\n      //     if (index > -1) {\n      //        this.reviews.splice(index, 1);\n      //     }\n      this.refreshReviews();\n    });\n  }\n\n  editReview(review:Review){\n    this.reviewService.updateReview(this.doctor.id, review).subscribe(res => {\n      console.log(\"doctor reviews : \", JSON.stringify(res))\n      this.refreshReviews()\n    });\n  }\n\n  refreshReviews(){\n    console.log(\"doctor: \", JSON.stringify(this.doctor))\n    this.refresh.emit(\"refresh\");\n    this.reviewService.getReviews(this.doctor?.id).subscribe(res => {\n      console.log(\"doctor reviews : \", JSON.stringify(res))\n      this.reviews = res;\n    })\n  }\n}\n","<!-- Review Listing -->\n<div class=\"widget review-listing\">\n    <ul class=\"comments-list\">\n        <app-review \n        *ngFor=\"let review of reviews\" \n        [review]=\"review\"\n        (deleteReview)=\"deleteReview($event)\"\n        (editReview)=\"editReview($event)\"></app-review>\n    </ul>\n</div>\n<!-- /Review Listing -->\n\n <!-- Write Review -->\n <div *ngIf=\"isPatient\" class=\"write-review\">\n    <h4>Write a review for <strong> Dr. {{doctor?.firstname | titlecase}} {{doctor?.lastname | titlecase}}</strong></h4>\n    \n    <!-- Write Review Form -->\n    <app-review-form (addReview)=\"addReview($event)\"></app-review-form>\n    <!-- /Write Review Form -->\n    \n</div>\n<!-- /Write Review -->\n\n","export class Appointment {\n    patientId:string;\n    doctorId:string;\n    state:string;\n    appointmentDate:string; \n    bookingDate:string;\n    description:string;\n}","import { ClinicLocation } from './ClinicLocation';\nexport class Clinic{\n    name:string;\n    description:string;\n    services:Array<string>;\n    specialities:Array<string>;\n    city:string;\n    country:string;\n    address:string;\n    minPrice:number;\n    maxPrice:number;\n    consultPrice:number;\n    location:ClinicLocation;\n\n    static empty():Clinic{\n        return {\n            name:\"\",\n            description:\"\",\n            services:[],\n            specialities:[],\n            city:\"\",\n            country:\"\",\n            address:\"\",\n            minPrice:0,\n            maxPrice:0,\n            consultPrice:0,\n            location:new ClinicLocation(0, 0, 2)\n        };\n    }\n}","export class ClinicLocation {\n    latitude:number;\n    longitude:number;\n    zoom:number;\n\n    constructor(latitude:number, longitude:number, zoom:number){\n        this.latitude = latitude;\n        this.longitude = longitude;\n        this.zoom = zoom;\n    }\n}","export class Contact {\n    name:string;\n    id:number;\n    message : string;\n    email:string;\n    phone?:string;\n  \n  }\n  \n","export class Like {\n    authorId:string;\n\n    constructor(authorId:string){\n        this.authorId = authorId;\n    }\n}","export class Password{\n    oldPassword:string;\n    newPassword:string;\n\n    constructor(oldPassword:string, newPassword:string){\n        this.oldPassword = oldPassword;\n        this.newPassword = newPassword;\n    }\n}","import { Like } from './Like';\n\nexport class Review {\n    id:string;\n    content:string;\n    rating:number;\n    patientId:string;\n    likes:Like[];\n    \n    constructor(content:string, likes:Like[], rating:number, authorId:string){\n        this.content = content;\n        this.likes = likes;\n        this.rating = rating;\n        this.patientId = authorId;\n    };\n}","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { TokenStorageService } from './token-storage.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminAuthGuard implements CanActivate {\n  constructor(private router: Router, private authStorage: TokenStorageService) {\n\n  }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot):\n    Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n      if ((this.authStorage.getUser() == null) || (this.authStorage.getUserType() !== \"ADMIN\")){\n        alert('You are not allowed to view this page. You are redirected to login Page');\n        console.log(\"next : \" + next);\n        console.log(\"state : \" + state);\n        this.router.navigate([\"admin/login\"],{ queryParams: { retUrl: state.url} });\n            return false;\n      }\n    return true;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Appointment } from '../models/Appointment';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppointmentService {\n\n  appoitmentUrl:string= \"http://localhost:8080/appointments\";\n  constructor(private http:HttpClient) { }\n\n\n  add(appointment:Appointment):Observable<Appointment>{\n   return this.http.post<Appointment>(this.appoitmentUrl, appointment);\n  }\n\n  update(appointment:Appointment):Observable<Appointment>{\n    return this.http.put<Appointment>(this.appoitmentUrl, appointment);\n   }\n\n  getAppointments():Observable<Appointment[]>{\n    return this.http.get<Appointment[]>(this.appoitmentUrl);\n  }\n\n  getAllDoctorAppoitments(doctorId:string):Observable<Appointment[]>{\n    return this.http.get<Appointment[]>(this.appoitmentUrl + '/doctor/' + doctorId);\n  }\n\n  getAllPatientAppoitments(patientId:string):Observable<Appointment[]>{\n    return this.http.get<Appointment[]>(this.appoitmentUrl + '/patient/' + patientId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';\n\nimport { TokenStorageService } from './token-storage.service';\n\nconst TOKEN_HEADER_KEY = 'Authorization';\nconst USER_TYPE_HEADER_KEY = 'User-Type';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(private token: TokenStorageService) { }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\n    let authReq = req;\n    const token = this.token.getToken();\n    const userType = this.token.getUserType();\n    let headers = req.headers;\n    if (token != null) {\n      headers = headers.set(TOKEN_HEADER_KEY, 'Bearer ' + token);\n    }\n\n    if (userType != null) {\n      console.log(\"userType\", userType);\n      headers = headers.set(USER_TYPE_HEADER_KEY, userType);\n    }\n    authReq = req.clone({headers: headers});\n    return next.handle(authReq);\n  }\n}","import { Injectable, Output , EventEmitter} from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { User } from '../models/User';\n\n// const AUTH_API = 'http://localhost:8080/';\nconst AUTH_USER = 'http://localhost:8080/api/auth/user'\nconst DOCTOR_API = 'http://localhost:8080/api/auth/doctor/'; //TODO make this just /auth/doctor/\nconst PATIENT_API = 'http://localhost:8080/api/auth/patient/';\nconst ADMIN_API = 'http://localhost:8080/api/auth/admin/';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  @Output() getLoggedInUser: EventEmitter<User> = new EventEmitter();\n\n  constructor(private http: HttpClient) { }\n\n  login(credentials, api:string): Observable<User> {\n    console.log(\"email: \" + credentials.email + \" password: \" + credentials.password);\n    return this.http.post<User>(api + 'signin', {\n      email: credentials.email,\n      password: credentials.password\n    }, httpOptions);\n    \n  }\n\n  //TODO define registration params\n  register(user, api:string): Observable<any> {\n    return this.http.post(api + 'signup', {\n      email: user.email,\n      password: user.password,\n      phone: user.phone,\n      username: user.username,\n      lastname: user.lastname,\n      firstname: user.firstname\n    }, httpOptions);\n  }\n  //TODO define patients\n\n  doctorLogin(credentials): Observable<User> {\n    return this.login(credentials, DOCTOR_API); \n  }\n\n  //TODO define registration params\n  doctorRegister(user): Observable<any> {\n    return this.register(user, DOCTOR_API);\n  }\n  \n  patientLogin(credentials): Observable<any> {\n    return this.login(credentials, PATIENT_API); \n  }\n\n  //TODO define registration params\n  patientRegister(user): Observable<any> {\n    return this.register(user, PATIENT_API);\n  }\n  \n  adminLogin(credentials): Observable<any> {\n    return this.login(credentials, ADMIN_API); \n  }\n\n  //TODO define registration params\n  adminRegister(user): Observable<any> {\n    return this.register(user, ADMIN_API);\n  }\n\n  getCurrentUser():Observable<User>{\n    return this.http.get<User>(AUTH_USER);\n  }\n  \n}","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Contact } from '../models/Contact';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContactService {\n  contactUrl:string = \"http://localhost:8080/contacts\";\n  \n  constructor(private http:HttpClient) { }\n\n  getContacts():Observable<Contact[]> {\n    return this.http.get<Contact[]>(this.contactUrl);\n  }\n\n  addContact(contact:Contact):Observable<Contact> {\n    return this.http.post<Contact>(this.contactUrl, contact);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { TokenStorageService } from './token-storage.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DoctorAuthGuard implements CanActivate {\n\n  constructor(private router: Router, private authStorage: TokenStorageService) {\n\n  }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot):\n    Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n      \n      if ((this.authStorage.getUser() == null) || (this.authStorage.getUserType() !== \"DOCTOR\")){\n        // alert('You are not allowed to view this page. You are redirected to login Page');\n        this.router.navigate([\"doctor/login\"],{ queryParams: { retUrl: state.url} });\n            return false;\n      }\n    return true;\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient , HttpParams, HttpEvent, HttpEventType, HttpRequest} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from  'rxjs/operators';\nimport { Doctor } from '../models/Doctor';\nimport { Clinic } from '../models/Clinic';\nimport { Password } from '../models/Password';\n\nconst API_URL = 'http://localhost:8080/api/test/';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DoctorService {\n  doctorUrl:string = \"http://localhost:8080/doctors\";\n  \n  constructor(private http:HttpClient) { }\n\n  \n  getDoctors():Observable<Doctor[]> {\n    return this.http.get<Doctor[]>(this.doctorUrl);\n  }\n\n  getById(id:string):Observable<Doctor>{\n    return this.http.get<Doctor>(this.doctorUrl + \"/\" + id);\n  }\n\n  updateDoctor(doctor:Doctor):Observable<Doctor>{\n    return this.http.put<Doctor>(this.doctorUrl, doctor);\n  }\n  \n  \n  getByUsername(username:string):Observable<Doctor>{\n    return this.http.get<Doctor>(this.doctorUrl + \"/username/\" + username);\n  }\n\n  \n  search(city:string, query:string):Observable<Doctor[]>{\n    const params = new HttpParams()\n      .set('city', city)\n      .set('query', query);\n    console.log(\"doc service\", \"city: \" + city, \"query : \" + query);\n    return this.http.get<Doctor[]>(this.doctorUrl, {'params': params})\n  }\n\n  getAvatar(id:string): Observable<any>{\n    return this.http.get(this.doctorUrl +  \"/\" + id + '/avatar');\n  }\n\n  uploadAvatar(doctorId:string, file:File):Observable<HttpEvent<any>>{\n    const formData: FormData = new FormData();\n\n    formData.append('avatar', file);\n    const req = new HttpRequest('POST', this.doctorUrl + '/' + doctorId + '/avatar', formData, {\n      reportProgress: true,\n      responseType: 'json'\n    });\n    return this.http.request(req);\n\n  }\n\n  getClinic(id:string): Observable<Clinic>{\n    return this.http.get<Clinic>(this.doctorUrl +  \"/\" + id + '/clinic');\n  }\n\n  getClinicPhotos(id:string): Observable<Array<any>>{\n    return this.http.get<Array<any>>(this.doctorUrl +  \"/\" + id + '/clinic/photos');\n  }\n\n  updateClinic(doctorId:string, clinic:Clinic):Observable<Clinic>{\n    return this.http.post<Clinic>(this.doctorUrl + '/' + doctorId + '/clinic', clinic);\n  }\n\n  deleteClinicPhoto(doctorId:string, photoId:string):Observable<any>{\n    return this.http.delete(this.doctorUrl + '/' + doctorId + '/clinic/photos/' + photoId);\n  }\n\n  uploadClinicPhoto(doctorId:string, file:File):Observable<HttpEvent<any>>{\n    const formData: FormData = new FormData();\n\n    formData.append('photo', file);\n    const req = new HttpRequest('POST', this.doctorUrl + '/' + doctorId + '/clinic/photos', formData, {\n      reportProgress: true,\n      responseType: 'json'\n    });\n    return this.http.request(req);\n\n  }\n\n  updatePassword(doctorId:string, password:Password):Observable<any>{\n    return this.http.post<any>(this.doctorUrl + '/' + doctorId + '/password',password);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { TokenStorageService } from './token-storage.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PatientAuthGuard implements CanActivate {\n  constructor(private router: Router, private authStorage: TokenStorageService) {\n\n  }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot):\n    Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n      if ((this.authStorage.getUser() == null) || (this.authStorage.getUserType() !== \"PATIENT\")){\n        //alert('You are not allowed to view this page. You are redirected to login Page');\n        this.router.navigate([\"patient/login\"],{ queryParams: { retUrl: state.url} });\n            return false;\n      }\n    return true;\n  }\n  \n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpRequest, HttpEvent} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Patient } from '../models/Patient';\nimport { Password } from '../models/Password';\n\nconst baseUrl = 'http://localhost:8080/patients';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PatientService {\n\n  constructor(private http: HttpClient) { }\n  //TODO Ayoub chaque method doit avoir le type de retour\n  getAll() {\n    return this.http.get(baseUrl);\n  }\n  get(id) {\n    return this.http.get(`${baseUrl}/${id}`);\n  }\n  getById(id):Observable<Patient>{\n    return this.http.get<Patient>(`${baseUrl}/${id}`);\n  }\n  create(data) {\n    return this.http.post(baseUrl, data);\n  }\n  update(id, data) {\n    return this.http.put( `${baseUrl}/${id}`, data);\n  }\n  delete(id) {\n    return this.http.delete(`${baseUrl}/${id}`);\n  }\n  deleteAll() {\n    return this.http.delete(baseUrl);\n  }\n\n  getAvatar(id:string): Observable<any>{\n    return this.http.get(baseUrl +  \"/\" + id + '/avatar');\n  }\n\n  uploadAvatar(patientId:string, file:File):Observable<HttpEvent<any>>{\n    const formData: FormData = new FormData();\n\n    formData.append('avatar', file);\n    const req = new HttpRequest('POST', baseUrl + '/' + patientId + '/avatar', formData, {\n      reportProgress: true,\n      responseType: 'json'\n    });\n    return this.http.request(req);\n\n  }\n\n  updatePassword(patientId:string, password:Password):Observable<any>{\n    return this.http.post<any>(baseUrl + '/' + patientId + '/password',password);\n  }\n\n  updatePatient(patirnt:Patient):Observable<Patient>{\n    return this.http.put<Patient>(baseUrl, patirnt);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Review } from '../models/Review';\nimport { HttpClient } from '@angular/common/http';\nimport { Like } from '../models/Like';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ReviewService {\n  doctorUrl:string = \"http://localhost:8080/doctors\";\n  constructor(private http:HttpClient) { }\n\n  getReviews(doctorId:string):Observable<Review[]>{\n    return this.http.get<Review[]>(this.doctorUrl + '/' + doctorId +  '/reviews');\n  }\n  addReview(doctorId:string, review:Review):Observable<Review>{\n    console.log(\"review in service: \", review);\n    return this.http.post<Review>(this.doctorUrl + '/' + doctorId + '/reviews', review);\n  }\n  updateReview(doctorId:string, review:Review):Observable<Review>{\n    return this.http.put<Review>(this.doctorUrl+ '/' + doctorId + '/reviews/' + review.id, review);\n  }\n\n  deleteReview(doctorId:string, reviewId:string):Observable<any>{\n    return this.http.delete(this.doctorUrl + '/' + doctorId + '/reviews/' + reviewId);\n  }\n\n  likeReview(reviewId:string, like:Like):Observable<Like>{\n    return this.http.post<Like>(this.doctorUrl+ '/reviews/' + reviewId +'/like', like);\n  }\n\n  unlikeReview(reviewId:string, like:Like):Observable<Like>{\n    return this.http.post<Like>(this.doctorUrl+ '/reviews/' + reviewId +'/unlike', like);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { User } from '../models/User';\n\nconst TOKEN_KEY = 'auth-token';\nconst USER_KEY = 'auth-user';\nconst USER_TYPE = 'user-type';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TokenStorageService {\n\n  constructor() { }\n\n  signOut() {\n    //window.sessionStorage.clear();\n    localStorage.clear();\n  }\n\n  \n  public saveToken(token: string) {\n    console.log(\"saving in storage \" + TOKEN_KEY  + \" : \" + token);\n    //window.sessionStorage.removeItem(TOKEN_KEY);\n    //window.sessionStorage.setItem(TOKEN_KEY, token);\n    localStorage.removeItem(TOKEN_KEY);\n    localStorage.setItem(TOKEN_KEY, token);\n  }\n  \n  public getToken(): string {\n    // return window.sessionStorage.getItem(TOKEN_KEY);\n    return localStorage.getItem(TOKEN_KEY);\n  }\n\n  \n  public saveUserType(userType: string) {\n    console.log(\"saving in storage \" + USER_TYPE  + \" : \" + userType);\n    // window.sessionStorage.removeItem(USER_TYPE);\n    // window.sessionStorage.setItem(USER_TYPE, userType);\n    localStorage.removeItem(USER_TYPE);\n    localStorage.setItem(USER_TYPE, userType);\n    \n  }\n\n  public getUserType(): string {\n    // return sessionStorage.getItem(USER_TYPE);\n    return localStorage.getItem(USER_TYPE);\n  }\n\n  \n\n  public saveUser(user:User) {\n    console.log(\"saving in storage \" + USER_KEY  + \" : \" + user);\n    localStorage.removeItem(USER_KEY);\n    localStorage.setItem(USER_KEY, JSON.stringify(user));\n  }\n\n  public getUser():User{\n    return JSON.parse(localStorage.getItem(USER_KEY));\n  }\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}